{"mappings":"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","sources":["./src/converter.tsx","./src/fileProcessor.tsx","./src/index.ts"],"sourcesContent":["import React from 'react'\r\nimport { renderToStaticMarkup } from 'react-dom/server'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport matter from 'gray-matter'\r\nimport { stringify } from 'json5'\r\n\r\ninterface File {\r\n    fileName: string\r\n    data: string\r\n}\r\n\r\ninterface FrontMatterAndJSX {\r\n    frontMatterJsxString: string\r\n    jsxString: string\r\n}\r\ninterface FrontMatterSplitFromMarkdown {\r\n    frontMatterJsxString: string\r\n    markdownString: string\r\n}\r\n\r\n/**\r\n * Converts Markdown files to JSX files, including any html in the markdown.\r\n * Also, front-matter will be extracted in js variables in the react component.\r\n * @param {string[]} `markdownFiles` Markdown strings to convert that may also include front-matter and html.\r\n * @param {string} `outputFolderPath` Front matter to stringify.\r\n * @param {string} `reactContextName` name of react context object to assign front-matter variables to.\r\n * @return {Promise<JsxFiles>} Files containing jsx\r\n */\r\nexport const convertMarkdownFilesToJSXFiles = async (markdownFiles: File[], reactContextVarName: string, reactContextName: string): Promise<File[]> => {\r\n    const files = await Promise.all(\r\n        markdownFiles.map(async file => {\r\n            const frontMatterAndMarkdown = extractFrontMatter(file.data, reactContextVarName, reactContextName)\r\n            const jsxString = convertMarkdownAndHtmlToJsx(frontMatterAndMarkdown.markdownString)\r\n            const reactComponentString = createJsxComponentString(file.fileName, jsxString, frontMatterAndMarkdown.frontMatterJsxString)\r\n            return { fileName: file.fileName, data: reactComponentString }\r\n        })\r\n    )\r\n\r\n    return files\r\n}\r\n\r\n/**\r\n * Converts Markdown to JSX, including any html in the markdown.\r\n * Also, front-matter will be extracted in js variables in the react component.\r\n * @param {string} `markdownString` Markdown string to convert to a react component that may also include front-matter and html.\r\n * @param {componentName} `componentName` Name of new react component.\r\n * @param {string} `reactContextVarName` name of react context variable name to assign front-matter variables to. like [shuji, setShuji] = useContext(...)\r\n * @param {string} `reactContextName` name of react context object to assign front-matter variables to.\r\n * @return {Promise<string>} Front matter and Markdown JSX strings\r\n */\r\nexport const convertMarkdownToJSX = async (markdownString: string, componentName: string, reactContextVarName: string, reactContextName: string): Promise<string> => {\r\n    const frontMatterAndMarkdown = extractFrontMatter(markdownString, reactContextVarName, reactContextName)\r\n    const jsxString = convertMarkdownAndHtmlToJsx(frontMatterAndMarkdown.markdownString)\r\n    const reactComponentString = createJsxComponentString(componentName, jsxString, frontMatterAndMarkdown.frontMatterJsxString)\r\n\r\n    return reactComponentString\r\n}\r\n\r\nconst convertMarkdownAndHtmlToJsx = (markdownString: string): string => {\r\n    try {\r\n        const jsxString = renderToStaticMarkup(<ReactMarkdown children={markdownString}  />)\r\n        const jsxStringWithTabs = jsxString.replace(/(\\n|\\r)/g, c => c + '\\t\\t\\t')\r\n        return jsxStringWithTabs\r\n    } catch (error) {\r\n        console.log(`error converting markdown to jsx: ${error}`)\r\n        throw new error()\r\n    }\r\n}\r\n\r\nconst extractFrontMatter = (stringWithFrontMatter: string, reactContextVarName: string, reactContextName: string): FrontMatterSplitFromMarkdown => {\r\n    try {\r\n        const { data, content } = matter(stringWithFrontMatter)\r\n        const frontMatterJsxString = createFrontMatterJSXString(data, reactContextVarName, reactContextName)\r\n\r\n        return {\r\n            frontMatterJsxString: frontMatterJsxString,\r\n            markdownString: content\r\n        }\r\n    } catch (error) {\r\n        console.log(`failed to extract front matter: ${error}`)\r\n        throw new error()\r\n    }\r\n}\r\n\r\nconst createFrontMatterJSXString = (propsToAssign: Object, reactContextVarName: string, reactContextName: string): string => {\r\n    if(Object.keys(propsToAssign).length < 1)\r\n        return ''\r\n\r\n    //Example\r\n    // const [metadata, setMetadata] = useContext('TestContext')\r\n    // setMetadata({\r\n    //     ...metadata,\r\n    //     date = '2021-01-01',\r\n\t//     title = 'node is cool',\r\n\t//     slug = 'node-is-cool',\r\n\t//     description = 'How to node',\r\n\t//     tags = ['node','cool','shuji']\r\n    // })\r\n\r\n    const setContextVarName = 'set' + reactContextVarName.replace(/^\\w/, c => c.toUpperCase())\r\n    const camelCasedVarName = reactContextVarName.replace(/^\\w/, c => c.toLowerCase())\r\n\r\n    let propAssignmentString = ''\r\n\r\n    for (const propName in propsToAssign) {\r\n        const propValue = propsToAssign[propName as keyof Object]\r\n        let propValueStringified = stringify(propValue)\r\n\r\n        propAssignmentString += `\\t\\t${propName} = ${propValueStringified}, \\n`\r\n    }\r\n\r\n    const contextAssignmentString =\r\n    `\\n\\tconst [${camelCasedVarName}, ${setContextVarName}] = useContext('${reactContextName}')`\r\n    + `\\n\\n\\t${setContextVarName}({`\r\n        + `\\n\\t\\t...${camelCasedVarName},`\r\n        + `\\n${propAssignmentString}`\r\n    + `\\n\\t})\\n`\r\n\r\n    return contextAssignmentString\r\n}\r\n\r\nconst createJsxComponentString = (componentName: string, reactString: string, frontMatterString?: string): string => {\r\n   const capitalizedMethodName = componentName.replace(/^\\w/, c => c.toUpperCase())\r\n   const camelCasedComponentName = componentName.replace(/^\\w/, c => c.toLowerCase())\r\n    let reactComponent = `export const ${capitalizedMethodName} = () => { \\n ${frontMatterString}\r\n    return (\r\n        <div className='${camelCasedComponentName}'>\r\n            ${reactString}\r\n        </div>\r\n    )\\n}`\r\n\r\n    return reactComponent\r\n}\r\n","import { promises } from 'fs'\r\nimport { extname, basename } from 'path'\r\n\r\ntype File = {\r\n    fileName: string\r\n    data: string\r\n}\r\n\r\nexport const getMdFilesFromFolder = async (path: string): Promise<File[]> => {\r\n    let mdFiles: File[] = []\r\n\r\n    try {\r\n        const pathStat = await promises.lstat(path)\r\n        const isPathADirectory = pathStat.isDirectory()\r\n\r\n        const fileNamesInDir =  isPathADirectory\r\n            ? await promises.readdir(path)\r\n            : [basename(path)]\r\n\r\n        if (fileNamesInDir.length < 1) {\r\n            console.log(`Shuji: No .md file(s) found in '${path}'`)\r\n            return mdFiles\r\n        }\r\n\r\n        console.log(`Shuji: Processing ${fileNamesInDir.length} file(s)...`)\r\n\r\n        mdFiles = await fileNamesInDir.reduce(async (validFilesPromise: Promise<File[]>, fileName: string) => {\r\n            const validFiles = await validFilesPromise\r\n\r\n            if (extname(fileName) != '.md') return validFiles\r\n\r\n            const filePath = isPathADirectory ? `${path}/${fileName}` : path\r\n            const fileData = await promises.readFile(filePath)\r\n            validFiles.push({ fileName: basename(fileName, '.md'), data: fileData.toString() })\r\n\r\n            return validFiles\r\n        }, Promise.resolve([]))\r\n    } catch (err) {\r\n        console.log(`Shuji: error retrieving file(s) from '${path}': ${err}`)\r\n    }\r\n\r\n    return mdFiles\r\n}\r\n\r\nexport const writeJsxFiles = async (folderPath: string, jsxFiles: File[], deleteExistingOutputFolder: boolean): Promise<void> => {\r\n    try {\r\n        if(deleteExistingOutputFolder)\r\n            await promises.rmdir(folderPath)\r\n\r\n        await promises.mkdir(folderPath, { recursive: true })\r\n        await Promise.all(\r\n            jsxFiles.map(async jsxFile => {\r\n                await promises.writeFile(`${folderPath}/${jsxFile.fileName}.jsx`, jsxFile.data, 'utf8')\r\n            })\r\n        )\r\n    } catch (error) {\r\n        console.log(`Shuji: error writing markdown files: ${error}`)\r\n    }\r\n}\r\n","import { convertMarkdownFilesToJSXFiles, convertMarkdownToJSX } from './converter'\r\nimport { getMdFilesFromFolder, writeJsxFiles } from './fileProcessor'\r\n\r\ninterface Options {\r\n    inputPath?: string\r\n    outputPath?: string\r\n    reactContextName?: string\r\n    reactContextVarName?: string\r\n    deleteExistingOutputFolder?: boolean\r\n}\r\n\r\nexport const defaultOptions = {\r\n    inputPath: 'markdown',\r\n    outputPath: 'jsxMarkdown',\r\n    reactContextName: 'ShujiContext',\r\n    reactContextVarName: 'shuji',\r\n    deleteExistingOutputFolder: false\r\n}\r\n\r\n/**\r\n * Transforms a Markdown string to JSX, including any html in the markdown.\r\n * Also, front-matter will be extracted in js variables in the react component.\r\n * @param {string} `markdownString` Markdown string to convert to a react component that may also include front-matter and html.\r\n * @param {componentName} `componentName` Name of new react component.\r\n * @param {Options} User defined options to override default values.\r\n * @return {Promise<number>} files\r\n */\r\n export const transformMarkdownString = async (markdownString: string, componentName: string, options?: Options): Promise<string> => {\r\n    try {\r\n        const userOptions = {\r\n            ...defaultOptions,\r\n            ...options\r\n        }\r\n\r\n        const jsxString = await convertMarkdownToJSX(markdownString, componentName, userOptions.reactContextVarName, userOptions.reactContextName)\r\n\r\n        return jsxString\r\n    } catch (error) {\r\n        return ''\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Transforms Markdown files to JSX files, including any html in the markdown.\r\n * Also, front-matter will be extracted in js variables in the react component.\r\n * @param {Options} User defined options to override default values.\r\n * @return {Promise<number>} files\r\n */\r\nexport const transformMarkdownFiles = async (options?: Options): Promise<number> => {\r\n    try {\r\n        const userOptions = {\r\n            ...defaultOptions,\r\n            ...options\r\n        }\r\n\r\n        const mdFiles = await getMdFilesFromFolder(userOptions.inputPath)\r\n        const jsxStrings = await convertMarkdownFilesToJSXFiles(mdFiles, userOptions.reactContextVarName, userOptions.reactContextName)\r\n        await writeJsxFiles(userOptions.outputPath, jsxStrings, userOptions.deleteExistingOutputFolder)\r\n\r\n        return 0\r\n    } catch (error) {\r\n        return 1\r\n    }\r\n}\r\n"],"names":["$b5eda152b6347c544474c79a45168ed$var$_react","$b5eda152b6347c544474c79a45168ed$var$_interopRequireDefault","_react","$b5eda152b6347c544474c79a45168ed$var$_server","_reactDomServer","$b5eda152b6347c544474c79a45168ed$var$_reactMarkdown","_reactMarkdown","$b5eda152b6347c544474c79a45168ed$var$_grayMatter","_grayMatter","$b5eda152b6347c544474c79a45168ed$var$_json","_json","async","markdownFiles","reactContextVarName","reactContextName","Promise","all","map","frontMatterAndMarkdown","extractFrontMatter","file","data","jsxString","convertMarkdownAndHtmlToJsx","markdownString","reactComponentString","createJsxComponentString","fileName","frontMatterJsxString","componentName","renderToStaticMarkup","default","createElement","children","replace","c","error","console","log","stringWithFrontMatter","content","createFrontMatterJSXString","propsToAssign","Object","keys","length","setContextVarName","toUpperCase","camelCasedVarName","toLowerCase","propAssignmentString","propName","propValue","stringify","reactString","frontMatterString","$ef231118494880909883b8bdab77b4d$var$_fs","_fs","$ef231118494880909883b8bdab77b4d$var$_path","_path","mdFiles","isPathADirectory","promises","lstat","path","isDirectory","fileNamesInDir","readdir","basename","reduce","validFilesPromise","validFiles","extname","filePath","fileData","readFile","push","toString","resolve","err","folderPath","jsxFiles","deleteExistingOutputFolder","rmdir","mkdir","recursive","writeFile","jsxFile","defaultOptions","inputPath","outputPath","options","userOptions","$b5eda152b6347c544474c79a45168ed$exports","convertMarkdownToJSX","$ef231118494880909883b8bdab77b4d$exports","getMdFilesFromFolder","jsxStrings","convertMarkdownFilesToJSXFiles","writeJsxFiles"],"version":3,"file":"index.js.map"}