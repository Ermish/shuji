{"mappings":"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","sources":["src/converter.tsx","src/logger.ts","src/fileProcessor.tsx","src/index.ts"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertMarkdownToJSX = exports.convertMarkdownFilesToJSXFiles = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _server = require(\"react-dom/server\");\n\nvar _reactMarkdown = _interopRequireDefault(require(\"react-markdown\"));\n\nvar _grayMatter = _interopRequireDefault(require(\"gray-matter\"));\n\nvar _json = require(\"json5\");\n\nvar _logger = require(\"./logger\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Converts Markdown files to JSX files, including any html in the markdown.\n * Also, front-matter will be extracted in js variables in the react component.\n * @param {string[]} `markdownFiles` Markdown strings to convert that may also include front-matter and html.\n * @param {string} `outputFolderPath` Front matter to stringify.\n * @param {string} `reactContextName` name of react context object to assign front-matter variables to.\n * @return {Promise<JsxFiles>} Files containing jsx\n */\nconst convertMarkdownFilesToJSXFiles = async (markdownFiles, frontMatterMode, reactContextVarName, reactContextName) => {\n  const files = await Promise.all(markdownFiles.map(async file => {\n    const frontMatterAndMarkdown = extractFrontMatter(file.data, frontMatterMode, reactContextVarName, reactContextName);\n    const jsxString = convertMarkdownAndHtmlToJsx(frontMatterAndMarkdown.markdownString);\n    const reactComponentString = createJsxComponentString(frontMatterAndMarkdown.componentNameFromFrontMatter ?? file.fileName, jsxString, frontMatterMode, frontMatterAndMarkdown.frontMatterJsxString, reactContextName);\n    return {\n      fileName: file.fileName,\n      data: reactComponentString\n    };\n  }));\n  return files;\n};\n/**\n * Converts Markdown to JSX, including any html in the markdown.\n * Also, front-matter will be extracted in js variables in the react component.\n * @param {string} `markdownString` Markdown string to convert to a react component that may also include front-matter and html.\n * @param {componentName} `componentName` Name of new react component.\n * @param {string} `reactContextVarName` name of react context variable name to assign front-matter variables to. like [shuji, setShuji] = useContext(...)\n * @param {string} `reactContextName` name of react context object to assign front-matter variables to.\n * @return {Promise<string>} Front matter and Markdown JSX strings\n */\n\n\nexports.convertMarkdownFilesToJSXFiles = convertMarkdownFilesToJSXFiles;\n\nconst convertMarkdownToJSX = async (markdownString, componentName, frontMatterMode, reactContextVarName, reactContextName) => {\n  const frontMatterAndMarkdown = extractFrontMatter(markdownString, frontMatterMode, reactContextVarName, reactContextName);\n  const jsxString = convertMarkdownAndHtmlToJsx(frontMatterAndMarkdown.markdownString);\n  const reactComponentString = createJsxComponentString(componentName, jsxString, frontMatterMode, frontMatterAndMarkdown.frontMatterJsxString, reactContextName);\n  return reactComponentString;\n};\n\nexports.convertMarkdownToJSX = convertMarkdownToJSX;\n\nconst convertMarkdownAndHtmlToJsx = markdownString => {\n  try {\n    const jsxString = (0, _server.renderToStaticMarkup)( /*#__PURE__*/_react.default.createElement(_reactMarkdown.default, {\n      children: markdownString\n    }));\n    const jsxStringWithTabs = jsxString.replace(/(\\n|\\r)/g, c => c + '\\t\\t\\t');\n    return jsxStringWithTabs;\n  } catch (error) {\n    (0, _logger.logger)().error(`error converting markdown to jsx: ${error}`);\n    throw new error();\n  }\n};\n\nconst extractFrontMatter = (stringWithFrontMatter, frontMatterMode, reactContextVarName, reactContextName) => {\n  try {\n    const {\n      data,\n      content\n    } = (0, _grayMatter.default)(stringWithFrontMatter);\n    const frontMatterJsxString = createFrontMatterJSXString(data, frontMatterMode, reactContextVarName, reactContextName);\n    const componentNameFromFrontMatter = data['react-component-name'];\n    return {\n      frontMatterJsxString: frontMatterJsxString,\n      markdownString: content,\n      componentNameFromFrontMatter\n    };\n  } catch (error) {\n    (0, _logger.logger)().error(`failed to extract front matter: ${error}`);\n    throw new error();\n  }\n};\n\nconst createFrontMatterJSXString = (propsToAssign, frontMatterMode, reactContextVarName, reactContextName) => {\n  if (Object.keys(propsToAssign).length < 1) return '';\n\n  if (frontMatterMode == 'reacthead') {\n    return createReactHeadString(propsToAssign, reactContextVarName, reactContextName);\n  }\n\n  if (frontMatterMode == 'reacthelmet') {\n    return createReactHelmentElements(propsToAssign);\n  }\n\n  return '';\n};\n\nconst createJsxComponentString = (componentName, reactString, frontMatterMode, frontmatterString, reactContextName) => {\n  const capitalizedMethodName = componentName.replace(/^\\w/, c => c.toUpperCase());\n  const camelCasedComponentName = componentName.replace(/^\\w/, c => c.toLowerCase());\n  let reactComponent = `${frontmatterString ? frontMatterMode == 'reacthelmet' ? `import { Helmet } from 'react-helmet'\\n\\n` : `import { ${reactContextName} } from 'reactHead'\\n\\n` : ''}` + `const ${capitalizedMethodName} = () => { \\n  ${frontMatterMode == 'reacthelmet' ? '' : frontmatterString}\n    return (\n        <div className='${camelCasedComponentName}'>\n        ${frontmatterString && frontMatterMode != 'none' ? `${frontmatterString}\\n\\t\\t` : ''}\\t${reactString}\n        </div>\n    )\\n}\n    \\nexport default ${capitalizedMethodName}`;\n  return reactComponent;\n};\n\nconst createReactHelmentElements = propsToAssign => {\n  if (!propsToAssign) {\n    return '';\n  }\n\n  let propAssignmentString = '';\n\n  for (const propName in propsToAssign) {\n    const propValue = propsToAssign[propName]; //clean up arrays\n\n    let propValueStringified = (0, _json.stringify)(propValue).replace(/]|[|'[]/g, '');\n\n    switch (propName) {\n      case 'title':\n        propAssignmentString += `\\n\\t\\t\\t\\t<title>${propValueStringified}</title>`;\n        break;\n\n      case 'description':\n        propAssignmentString += `\\n\\t\\t\\t\\t<meta name=\"description\" content=\"${propValueStringified}\" />`;\n        break;\n\n      case 'author':\n        propAssignmentString += `\\n\\t\\t\\t\\t<meta name=\"author\" content=\"${propValueStringified}\" />`;\n        break;\n\n      case 'keywords':\n        propAssignmentString += `\\n\\t\\t\\t\\t<meta name=\"keywords\" content=\"${propValueStringified}\" />`;\n        break;\n\n      case 'react-component-name':\n        break;\n\n      default:\n        propAssignmentString += `\\n\\t\\t\\t\\t<meta name=\"${propName}\" content=\"${propValueStringified}\" />`;\n        break;\n    }\n  }\n\n  const reactHelmetString = `\\t<Helmet>` + `\\t\\t${propAssignmentString}` + `\\n\\t\\t\\t</Helmet>`;\n  return reactHelmetString;\n};\n\nconst createReactHeadString = (propsToAssign, reactContextVarName, reactContextName) => {\n  if (!propsToAssign) {\n    return '';\n  } //Example\n  // const [metadata, setMetadata] = useContext('TestContext')\n  // setMetadata({\n  //     ...metadata,\n  //     date = '2021-01-01',\n  //     title = 'node is cool',\n  //     slug = 'node-is-cool',\n  //     description = 'How to node',\n  //     tags = ['node','cool','shuji']\n  // })\n\n\n  const contextVarNameLettersOnly = reactContextVarName.replace(/[^\\w]/g, '');\n  const setContextVarName = 'set' + contextVarNameLettersOnly.replace(/^\\w/, c => c.toUpperCase());\n  const camelCasedVarName = contextVarNameLettersOnly.replace(/^\\w/, c => c.toLowerCase());\n  let propAssignmentString = '';\n\n  for (const propName in propsToAssign) {\n    const propValue = propsToAssign[propName];\n    let propValueStringified = (0, _json.stringify)(propValue);\n    const propNameAlphanumericOnly = propName.replace(/[^\\w]/g, '');\n    if (propNameAlphanumericOnly.toLowerCase() === 'reactcomponentname') continue;\n    propAssignmentString += `\\t\\t${propNameAlphanumericOnly} = ${propValueStringified}, \\n`;\n  }\n\n  const contextAssignmentString = `\\n\\tconst [${camelCasedVarName}, ${setContextVarName}] = useContext('${reactContextName}')` + `\\n\\n\\t${setContextVarName}({` + `\\n\\t\\t...${camelCasedVarName},` + `\\n${propAssignmentString}` + `\\t})`;\n  return contextAssignmentString;\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logger = logger;\nexports.setLogLevel = setLogLevel;\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//TODO make this a real logger\nfunction logger() {\n  const shujiPurple = _chalk.default.hex('#6C63A2');\n\n  const debug = message => {\n    if (logLevel > 1) return;\n\n    const blue = _chalk.default.hex('#58a6ff');\n\n    console.log(shujiPurple('Shuji: ') + blue(message));\n  };\n\n  const info = message => {\n    if (logLevel > 2) return;\n\n    const blue = _chalk.default.hex('#58a6ff');\n\n    console.log(shujiPurple('Shuji: ') + blue(message));\n  };\n\n  const warn = message => {\n    if (logLevel > 2) return;\n\n    const orange = _chalk.default.hex('#FFA500');\n\n    console.log(shujiPurple('Shuji: ') + orange(message));\n  };\n\n  const error = (message, error) => {\n    if (logLevel > 2) return;\n\n    const red = _chalk.default.hex('#ff7b72');\n\n    const fullErrorMessage = error ? message + `\\n actual error: ${error.message} \\n ${error.stack}` : message;\n    console.log(shujiPurple('Shuji: ') + red(fullErrorMessage));\n  };\n\n  return {\n    debug,\n    info,\n    warn,\n    error\n  };\n} // level 1 = debug\n// level 2 = default\n// level 3 = no logging\n\n\nlet logLevel = 2;\n\nfunction setLogLevel(level) {\n  logLevel = level;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.writeJsxFiles = exports.getMdFilesFromFolder = void 0;\n\nvar _fs = require(\"fs\");\n\nvar _path = require(\"path\");\n\nvar _logger = require(\"./logger\");\n\nconst getMdFilesFromFolder = async path => {\n  let mdFiles = [];\n\n  try {\n    const pathStat = await _fs.promises.lstat(path);\n    const isPathADirectory = pathStat.isDirectory();\n    const fileNamesInDir = isPathADirectory ? await _fs.promises.readdir(path) : [(0, _path.basename)(path)];\n\n    if (fileNamesInDir.length < 1) {\n      (0, _logger.logger)().warn(`No .md files found in '${path}'`);\n      return mdFiles;\n    }\n\n    (0, _logger.logger)().info(`Processing ${fileNamesInDir.length} file${fileNamesInDir.length > 1 ? 's' : ''} from \"${path}\"...`);\n    mdFiles = await fileNamesInDir.reduce(async (validFilesPromise, fileName) => {\n      const validFiles = await validFilesPromise;\n      if ((0, _path.extname)(fileName) != '.md') return validFiles;\n      const filePath = isPathADirectory ? `${path}/${fileName}` : path;\n      const fileData = await _fs.promises.readFile(filePath);\n      validFiles.push({\n        fileName: (0, _path.basename)(fileName, '.md'),\n        data: fileData.toString()\n      });\n      return validFiles;\n    }, Promise.resolve([]));\n  } catch (err) {\n    (0, _logger.logger)().warn(`No .md files found in inputPath: '${path}'`);\n  }\n\n  return mdFiles;\n};\n\nexports.getMdFilesFromFolder = getMdFilesFromFolder;\n\nconst writeJsxFiles = async (folderPath, jsxFiles, deleteExistingOutputFolder) => {\n  try {\n    if (jsxFiles.length <= 0) return;\n    if (deleteExistingOutputFolder) await _fs.promises.rmdir(folderPath);\n    (0, _logger.logger)().info(`Generating ${jsxFiles.length} file${jsxFiles.length > 1 ? 's' : ''} in \"${folderPath}\"...`);\n    await _fs.promises.mkdir(folderPath, {\n      recursive: true\n    });\n    await Promise.all(jsxFiles.map(async jsxFile => {\n      await _fs.promises.writeFile(`${folderPath}/${jsxFile.fileName}.jsx`, jsxFile.data, 'utf8');\n    }));\n  } catch (error) {\n    (0, _logger.logger)().error(`error writing markdown files: ${error}`);\n  }\n};\n\nexports.writeJsxFiles = writeJsxFiles;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformMarkdownFiles = exports.transformMarkdownString = exports.defaultOptions = void 0;\n\nvar _converter = require(\"./converter\");\n\nvar _fileProcessor = require(\"./fileProcessor\");\n\nvar _logger = require(\"./logger\");\n\nconst {\n  performance,\n  PerformanceObserver,\n  PerformanceEntry\n} = require(\"perf_hooks\");\n\nconst defaultOptions = {\n  inputPath: 'markdown',\n  outputPath: 'jsxMarkdown',\n  frontMatterMode: 'reacthelmet',\n  reactHeadContextName: 'ReactHeadContext',\n  reactHeadContextVarName: 'reactHead',\n  deleteExistingOutputFolder: false\n}; //TODO: use typescript types\n\nexports.defaultOptions = defaultOptions;\nconst perfObserver = new PerformanceObserver(items => {\n  items.getEntries().forEach(entry => {\n    const trimmedDuration = parseInt(entry.duration);\n\n    if (entry.name == 'shuji') {\n      (0, _logger.logger)().info(`Done in ${trimmedDuration}ms.`);\n      return;\n    }\n\n    (0, _logger.logger)().debug(`${entry.name} finished in ${trimmedDuration}ms.`);\n  });\n});\nperfObserver.observe({\n  entryTypes: [\"measure\"],\n  buffer: true\n});\n/**\n * Transforms a Markdown string to JSX, including any html in the markdown.\n * Also, front-matter will be extracted in js variables in the react component.\n * @param {string} `markdownString` Markdown string to convert to a react component that may also include front-matter and html.\n * @param {componentName} `componentName` Name of new react component.\n * @param {Options} User defined options to override default values.\n * @return {Promise<number>} files\n */\n\nconst transformMarkdownString = async (markdownString, componentName, options) => {\n  try {\n    performance.mark('start-shuji');\n    const userOptions = { ...defaultOptions,\n      ...options,\n      frontMatterMode: options?.frontMatterMode?.toLowerCase() ?? defaultOptions.frontMatterMode\n    };\n    const jsxString = await (0, _converter.convertMarkdownToJSX)(markdownString, componentName, userOptions.frontMatterMode, userOptions.reactHeadContextVarName, userOptions.reactHeadContextName);\n    return jsxString;\n  } catch (error) {\n    return '';\n  } finally {\n    performance.mark('end-shuji');\n    performance.measure('shuji', 'start-shuji', 'end-shuji');\n  }\n};\n/**\n * Transforms Markdown files to JSX files, including any html in the markdown.\n * Also, front-matter will be extracted in js variables in the react component.\n * @param {Options} User defined options to override default values.\n * @return {Promise<number>} files\n */\n\n\nexports.transformMarkdownString = transformMarkdownString;\n\nconst transformMarkdownFiles = async options => {\n  try {\n    performance.mark('start-shuji');\n    const userOptions = { ...defaultOptions,\n      ...options,\n      frontMatterMode: options?.frontMatterMode?.toLowerCase() ?? defaultOptions.frontMatterMode\n    };\n    const mdFiles = await (0, _fileProcessor.getMdFilesFromFolder)(userOptions.inputPath);\n    const jsxStrings = await (0, _converter.convertMarkdownFilesToJSXFiles)(mdFiles, userOptions.frontMatterMode, userOptions.reactHeadContextVarName, userOptions.reactHeadContextName);\n    await (0, _fileProcessor.writeJsxFiles)(userOptions.outputPath, jsxStrings, userOptions.deleteExistingOutputFolder);\n    return 0;\n  } catch (error) {\n    return 1;\n  } finally {\n    performance.mark('end-shuji');\n    performance.measure('shuji', 'start-shuji', 'end-shuji');\n  }\n};\n\nexports.transformMarkdownFiles = transformMarkdownFiles;"],"names":["$ef41a945f0ad9b72d9d658553d0d8690$var$_react","$ef41a945f0ad9b72d9d658553d0d8690$var$_interopRequireDefault","$12ozq$react","$ef41a945f0ad9b72d9d658553d0d8690$var$_reactMarkdown","$12ozq$reactmarkdown","$ef41a945f0ad9b72d9d658553d0d8690$var$_grayMatter","$12ozq$graymatter","shujiPurple","chalk","hex","message","logLevel","blue","console","log","orange","error","red","fullErrorMessage","stack","level","$c08bde6a2c7ebbc4ffc54f57ff3d4fab$var$_chalk","$12ozq$chalk","async","markdownFiles","frontMatterMode","reactContextVarName","reactContextName","Promise","all","map","file","frontMatterAndMarkdown","extractFrontMatter","data","jsxString","convertMarkdownAndHtmlToJsx","markdownString","reactComponentString","createJsxComponentString","componentNameFromFrontMatter","fileName","frontMatterJsxString","componentName","$12ozq$renderToStaticMarkup","default","createElement","children","replace","c","$c08bde6a2c7ebbc4ffc54f57ff3d4fab$exports","logger","stringWithFrontMatter","content","createFrontMatterJSXString","propsToAssign","Object","keys","length","createReactHeadString","createReactHelmentElements","reactString","frontmatterString","capitalizedMethodName","toUpperCase","toLowerCase","propAssignmentString","propName","propValue","propValueStringified","$12ozq$stringify","contextVarNameLettersOnly","setContextVarName","camelCasedVarName","propNameAlphanumericOnly","path","mdFiles","isPathADirectory","promises","lstat","isDirectory","fileNamesInDir","readdir","$12ozq$basename","warn","info","reduce","validFilesPromise","validFiles","$12ozq$extname","filePath","fileData","readFile","push","toString","resolve","err","folderPath","jsxFiles","deleteExistingOutputFolder","rmdir","mkdir","recursive","jsxFile","writeFile","$12ozq$PerformanceObserver","$12ozq$performance","defaultOptions","inputPath","outputPath","reactHeadContextName","reactHeadContextVarName","$7d09df7f6586727d9bda14a00ae6ddb6$require$PerformanceObserver","items","getEntries","forEach","entry","trimmedDuration","parseInt","duration","name","debug","observe","entryTypes","buffer","options","mark","userOptions","$ef41a945f0ad9b72d9d658553d0d8690$exports","convertMarkdownToJSX","measure","$c09e710eec33281839f83e0e295043f3$exports","getMdFilesFromFolder","jsxStrings","convertMarkdownFilesToJSXFiles","writeJsxFiles"],"version":3,"file":"index.js.map","sourceRoot":"../"}