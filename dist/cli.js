#! /usr/bin/env node
var e=require("yargs"),{readFileSync:t,promises:r}=require("fs"),o=require("react"),{renderToStaticMarkup:n}=require("react-dom/server"),a=require("react-markdown"),i=require("gray-matter"),{stringify:s}=require("json5"),l=require("chalk"),{basename:c,extname:d}=require("path"),u="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},p={},g={},f=u.parcelRequired42d;null==f&&((f=function(e){if(e in p)return p[e].exports;if(e in g){let t=g[e];delete g[e];let r={id:e,exports:{}};return p[e]=r,t.call(r.exports,r,r.exports),r.exports}var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}).register=function(e,t){g[e]=t},u.parcelRequired42d=f),Object.defineProperty(module.exports,"__esModule",{value:!0}),module.exports.cli=void 0;var m,h,w=(m=e)&&m.__esModule?m:{default:m};h=JSON.parse('{"name":"@ermish/shuji","version":"1.1.3","author":"ermish <philipermish@gmail.com>","license":"MIT","description":"A Markdown to React JSX converter","keywords":["react","markdown","template","remark","jsx","front matter","converter"],"engines":{"node":">14"},"repository":"https://github.com/Ermish/shuji","bin":{"shuji":"./dist/cli.js"},"collaborators":["ermish <philipermish@gmail.com>"],"files":["dist/","package.json","license","README.md"],"publishConfig":{"access":"public"},"scripts":{"build":"yarn && parcel build ./src/index.ts ./src/cli.ts --dist-dir dist","start":"yarn && parcel watch ./src/index.ts --dist-dir dist","lint":"eslint ./src/**.js","test":"jest --verbose","cli":""},"dependencies":{"chalk":"4.1.1","fs-extra":"10.0.0","gray-matter":"^4.0.2","json5":"^2.2.0","react":"17.0.2","react-dom":"17.0.2","react-markdown":"^6.0.2","remark-gfm":"^1.0.0","yargs":"^17.0.1"},"devDependencies":{"@babel/core":"^7.14.0","@babel/preset-env":"^7.12.11","@babel/preset-react":"^7.13.13","@babel/preset-typescript":"^7.13.0","@tsconfig/node16":"^1.0.0","@types/fs-extra":"^9.0.11","@types/jest":"^26.0.20","@types/json5":"^2.2.0","@types/klaw":"^3.0.1","@types/react":"17.0.0","@types/react-dom":"17.0.0","babel-jest":"^26.6.3","eslint":"7.17.0","eslint-config-prettier":"^7.1.0","jest":"^26.6.3","parcel":"2.0.0-beta.3.1","sass":"1.32.0","stylelint":"13.8.0","stylelint-config-recommended":"3.0.0","stylelint-order":"4.1.0","stylelint-scss":"3.18.0","typescript":"4.2.4"}}');var y={};Object.defineProperty(y,"__esModule",{value:!0}),y.transformMarkdownFiles=y.transformMarkdownString=y.defaultOptions=void 0;var x={};Object.defineProperty(x,"__esModule",{value:!0}),x.convertMarkdownToJSX=x.convertMarkdownFilesToJSXFiles=void 0;var b=F(o),v=F(a),j=F(i);f.register("5RGgR",(function(e,t){"use strict";Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.logger=function(){const e=r.default.hex("#6C63A2");return{debug:t=>{if(!o)return;const n=r.default.hex("#58a6ff");console.log(e("Shuji: ")+n(t))},info:t=>{const o=r.default.hex("#58a6ff");console.log(e("Shuji: ")+o(t))},warn:t=>{const o=r.default.hex("#FFA500");console.log(e("Shuji: ")+o(t))},error:(t,o)=>{const n=r.default.hex("#ff7b72"),a=o?t+`\n actual error: ${o.message} \n ${o.stack}`:t;console.log(e("Shuji: ")+n(a))}}},e.exports.setIsDebugMode=function(e){o=!0===e};var r=function(e){return e&&e.__esModule?e:{default:e}}(l);let o=!1}));var k=f("5RGgR");function F(e){return e&&e.__esModule?e:{default:e}}x.convertMarkdownFilesToJSXFiles=async(e,t,r)=>await Promise.all(e.map((async e=>{const o=$(e.data,t,r),n=M(o.markdownString),a=N(e.fileName,n,o.frontMatterJsxString);return{fileName:e.fileName,data:a}})));x.convertMarkdownToJSX=async(e,t,r,o)=>{const n=$(e,r,o),a=M(n.markdownString);return N(t,a,n.frontMatterJsxString)};const M=e=>{try{const t=n(b.default.createElement(v.default,{children:e}));return t.replace(/(\n|\r)/g,(e=>e+"\t\t\t"))}catch(e){throw k.logger().error(`error converting markdown to jsx: ${e}`),new e}},$=(e,t,r)=>{try{const{data:o,content:n}=j.default(e);return{frontMatterJsxString:S(o,t,r),markdownString:n}}catch(e){throw k.logger().error(`failed to extract front matter: ${e}`),new e}},S=(e,t,r)=>{if(Object.keys(e).length<1)return"";const o="set"+t.replace(/^\w/,(e=>e.toUpperCase())),n=t.replace(/^\w/,(e=>e.toLowerCase()));let a="";for(const t in e){const r=e[t];a+=`\t\t${t} = ${s(r)}, \n`}return`\n\tconst [${n}, ${o}] = useContext('${r}')\n\n\t${o}({\n\t\t...${n},\n${a}\n\t})\n`},N=(e,t,r)=>`export const ${e.replace(/^\w/,(e=>e.toUpperCase()))} = () => { \n ${r}\n    return (\n        <div className='${e.replace(/^\w/,(e=>e.toLowerCase()))}'>\n            ${t}\n        </div>\n    )\n}`;var C={};Object.defineProperty(C,"__esModule",{value:!0}),C.writeJsxFiles=C.getMdFilesFromFolder=void 0;k=f("5RGgR");C.getMdFilesFromFolder=async e=>{let t=[];try{const o=(await r.lstat(e)).isDirectory(),n=o?await r.readdir(e):[c(e)];if(n.length<1)return k.logger().warn(`No .md file(s) found in '${e}'`),t;k.logger().info(`Processing ${n.length} file(s)...`),t=await n.reduce((async(t,n)=>{const a=await t;if(".md"!=d(n))return a;const i=o?`${e}/${n}`:e,s=await r.readFile(i);return a.push({fileName:c(n,".md"),data:s.toString()}),a}),Promise.resolve([]))}catch(t){k.logger().warn(`No files found in inputPath: '${e}'`)}return t};C.writeJsxFiles=async(e,t,o)=>{try{if(t.length<=0)return;o&&await r.rmdir(e),await r.mkdir(e,{recursive:!0}),await Promise.all(t.map((async t=>{await r.writeFile(`${e}/${t.fileName}.jsx`,t.data,"utf8")})))}catch(e){k.logger().error(`error writing markdown files: ${e}`)}};const O={inputPath:"markdown",outputPath:"jsxMarkdown",reactContextName:"ShujiContext",reactContextVarName:"shuji",deleteExistingOutputFolder:!1};y.defaultOptions=O;y.transformMarkdownString=async(e,t,r)=>{try{const o={...O,...r};return await x.convertMarkdownToJSX(e,t,o.reactContextVarName,o.reactContextName)}catch(e){return""}};y.transformMarkdownFiles=async e=>{try{const t={...O,...e},r=await C.getMdFilesFromFolder(t.inputPath),o=await x.convertMarkdownFilesToJSXFiles(r,t.reactContextVarName,t.reactContextName);return await C.writeJsxFiles(t.outputPath,o,t.deleteExistingOutputFolder),0}catch(e){return 1}};const P=async e=>{try{const r=(e=>{const t={};return Object.keys(y.defaultOptions).forEach((r=>{e.hasOwnProperty(r)&&(t[r]=e[r])})),f("5RGgR").logger().debug(`parsed user options: ${JSON.stringify(t)}`),t})((e=>{const r=w.default(e).scriptName("shuji").wrap(w.default.terminalWidth()).help("help").alias("help","h").showHelpOnFail(!1,"whoops, something went wrong! try running with --help").epilogue("for more information, check out the documentation at https://github.com/ermish/shuji").version("v","shuji version",h.version??"unable to verify. check your package.json").alias("version","v").config("config",'path to a Shuji ".shujirc.json" or ".shujirc" config file ',(function(e){return JSON.parse(t(e,"utf-8"))})).alias("c","config").example([['$0 -c="./.shujirc"',"importing config file."],["$0 --inputPath=./src/markdown/ --outputPath=./src/jsxPages/ --config=./.shujirc.json","Full example"]]).option("debug",{alias:"d",describe:"Enable debug mode. (enhanced logging only used for debugging errors)",type:"boolean"}).group(["inputPath","outputPath","reactContextName","reactContextVarName","deleteExistingOutputFolder"],"Config Parameters:").option("inputPath",{alias:"i",describe:"Target folder or file with .md files for Shuji to parse",type:"string"}).option("outputPath",{alias:"o",describe:"Output destination folder to write the compiled .jsx files",type:"string"}).option("reactContextName",{alias:"rc",describe:"The react context name in which any detected front-matter will be set through useContext('${reactContextName}')",type:"string"}).option("reactContextVarName",{alias:"rcv",describe:"The name of the react context object and set method assigned from useContext('${reactContextName}'). ex. const [${yourVar}, set${YourVar}]",type:"string"}).option("deleteExistingOutputFolder",{alias:"del",describe:"Delete existing content in the output folder (outputFolderPath) before writing compiled files",type:"boolean"}).argv;return f("5RGgR").setIsDebugMode(r.debug),f("5RGgR").logger().debug(`cli args: ${JSON.stringify(r)}`),r})(e));await y.transformMarkdownFiles(r),f("5RGgR").logger().debug("done!")}catch(e){f("5RGgR").logger().error("An unknown error occurred! Try using a markdown validator to ensure your mardown files are valid",e)}};module.exports.cli=P,P(process.argv);
//# sourceMappingURL=cli.js.map
