#! /usr/bin/env node
var e=require("yargs"),{readFileSync:t,promises:r}=require("fs"),{PerformanceEntry:n,performance:o,PerformanceObserver:a}=require("perf_hooks"),i=require("react"),{renderToStaticMarkup:s}=require("react-dom/server"),l=require("react-markdown"),c=require("gray-matter"),{stringify:u}=require("json5"),d=require("chalk"),{basename:f,extname:m}=require("path");Object.defineProperty(module.exports,"__esModule",{value:!0}),module.exports.cli=void 0;var p,g,h=(p=e)&&p.__esModule?p:{default:p};g=JSON.parse('{"name":"@ermish/shuji","version":"1.2.0","author":"ermish <philipermish@gmail.com>","license":"MIT","description":"A Markdown to React JSX converter","keywords":["react","markdown","template","remark","jsx","front matter","converter"],"engines":{"node":">14"},"repository":"https://github.com/Ermish/shuji","bin":{"shuji":"./dist/cli.js"},"collaborators":["ermish <philipermish@gmail.com>"],"files":["dist/","package.json","license","README.md"],"publishConfig":{"access":"public"},"scripts":{"build":"yarn && parcel build ./src/index.ts ./src/cli.ts --dist-dir dist","start":"node ./dist/cli.js -i=\'./src/samples\'","lint":"eslint ./src/**.js","test":"jest --verbose","cli":""},"dependencies":{"chalk":"^4.1.1","fs-extra":"^10.0.0","gray-matter":"^4.0.2","json5":"^2.2.0","react":"^17.0.2","react-dom":"^17.0.2","react-markdown":"^6.0.2","yargs":"^17.0.1"},"devDependencies":{"@babel/core":"^7.14.0","@babel/preset-env":"^7.12.11","@babel/preset-react":"^7.13.13","@babel/preset-typescript":"^7.13.0","@tsconfig/node16":"^1.0.0","@types/fs-extra":"^9.0.11","@types/jest":"^26.0.20","@types/json5":"^2.2.0","@types/klaw":"^3.0.1","@types/react":"^17.0.0","@types/react-dom":"^17.0.0","babel-jest":"^26.6.3","eslint":"^7.27.0","eslint-config-prettier":"^7.1.0","jest":"^26.6.3","parcel":"^2.0.0-beta.3.1","sass":"^1.32.0","stylelint":"^13.8.0","stylelint-config-recommended":"^3.0.0","stylelint-order":"^4.1.0","stylelint-scss":"^3.18.0","typescript":"^4.2.4"}}');var w={};Object.defineProperty(w,"__esModule",{value:!0}),w.transformMarkdownFiles=w.transformMarkdownString=w.defaultOptions=void 0;var y={};Object.defineProperty(y,"__esModule",{value:!0}),y.convertMarkdownToJSX=y.convertMarkdownFilesToJSXFiles=void 0;var j=F(i),v=F(l),x=F(c),b={};Object.defineProperty(b,"__esModule",{value:!0}),b.logger=function(){const e=k.default.hex("#6C63A2");return{debug:t=>{if($>1)return;const r=k.default.hex("#58a6ff");console.log(e("Shuji: ")+r(t))},info:t=>{if($>2)return;const r=k.default.hex("#58a6ff");console.log(e("Shuji: ")+r(t))},warn:t=>{if($>2)return;const r=k.default.hex("#FFA500");console.log(e("Shuji: ")+r(t))},error:(t,r)=>{if($>2)return;const n=k.default.hex("#ff7b72"),o=r?t+`\n actual error: ${r.message} \n ${r.stack}`:t;console.log(e("Shuji: ")+n(o))}}},b.setLogLevel=function(e){$=e};var k=function(e){return e&&e.__esModule?e:{default:e}}(d);let $=2;function F(e){return e&&e.__esModule?e:{default:e}}y.convertMarkdownFilesToJSXFiles=async(e,t,r)=>await Promise.all(e.map((async e=>{const n=S(e.data,t,r),o=M(n.markdownString),a=N(e.fileName,o,n.frontMatterJsxString);return{fileName:e.fileName,data:a}})));y.convertMarkdownToJSX=async(e,t,r,n)=>{const o=S(e,r,n),a=M(o.markdownString);return N(t,a,o.frontMatterJsxString)};const M=e=>{try{const t=s(j.default.createElement(v.default,{children:e}));return t.replace(/(\n|\r)/g,(e=>e+"\t\t\t"))}catch(e){throw b.logger().error(`error converting markdown to jsx: ${e}`),new e}},S=(e,t,r)=>{try{const{data:n,content:o}=x.default(e);return{frontMatterJsxString:P(n,t,r),markdownString:o}}catch(e){throw b.logger().error(`failed to extract front matter: ${e}`),new e}},P=(e,t,r)=>{if(Object.keys(e).length<1)return"";const n="set"+t.replace(/^\w/,(e=>e.toUpperCase())),o=t.replace(/^\w/,(e=>e.toLowerCase()));let a="";for(const t in e){const r=e[t];a+=`\t\t${t} = ${u(r)}, \n`}return`\n\tconst [${o}, ${n}] = useContext('${r}')\n\n\t${n}({\n\t\t...${o},\n${a}\n\t})\n`},N=(e,t,r)=>`export const ${e.replace(/^\w/,(e=>e.toUpperCase()))} = () => { \n ${r}\n    return (\n        <div className='${e.replace(/^\w/,(e=>e.toLowerCase()))}'>\n            ${t}\n        </div>\n    )\n}`;var C={};Object.defineProperty(C,"__esModule",{value:!0}),C.writeJsxFiles=C.getMdFilesFromFolder=void 0;C.getMdFilesFromFolder=async e=>{let t=[];try{const n=(await r.lstat(e)).isDirectory(),o=n?await r.readdir(e):[f(e)];if(o.length<1)return b.logger().warn(`No .md files found in '${e}'`),t;b.logger().info(`Processing ${o.length} file${o.length>1?"s":""} from "${e}"...`),t=await o.reduce((async(t,o)=>{const a=await t;if(".md"!=m(o))return a;const i=n?`${e}/${o}`:e,s=await r.readFile(i);return a.push({fileName:f(o,".md"),data:s.toString()}),a}),Promise.resolve([]))}catch(t){b.logger().warn(`No .md files found in inputPath: '${e}'`)}return t};C.writeJsxFiles=async(e,t,n)=>{try{if(t.length<=0)return;n&&await r.rmdir(e),b.logger().info(`Generating ${t.length} file${t.length>1?"s":""} in "${e}"...`),await r.mkdir(e,{recursive:!0}),await Promise.all(t.map((async t=>{await r.writeFile(`${e}/${t.fileName}.jsx`,t.data,"utf8")})))}catch(e){b.logger().error(`error writing markdown files: ${e}`)}};var O=o,J=a;const _={inputPath:"markdown",outputPath:"jsxMarkdown",reactContextName:"ShujiContext",reactContextVarName:"shuji",deleteExistingOutputFolder:!1};w.defaultOptions=_;new J((e=>{e.getEntries().forEach((e=>{const t=parseInt(e.duration);"shuji"!=e.name?b.logger().debug(`${e.name} finished in ${t}ms.`):b.logger().info(`Done in ${t}ms.`)}))})).observe({entryTypes:["measure"],buffer:!0});w.transformMarkdownString=async(e,t,r)=>{try{O.mark("start-shuji");const n={..._,...r};return await y.convertMarkdownToJSX(e,t,n.reactContextVarName,n.reactContextName)}catch(e){return""}finally{O.mark("end-shuji"),O.measure("shuji","start-shuji","end-shuji")}};w.transformMarkdownFiles=async e=>{try{O.mark("start-shuji");const t={..._,...e},r=await C.getMdFilesFromFolder(t.inputPath),n=await y.convertMarkdownFilesToJSXFiles(r,t.reactContextVarName,t.reactContextName);return await C.writeJsxFiles(t.outputPath,n,t.deleteExistingOutputFolder),0}catch(e){return 1}finally{O.mark("end-shuji"),O.measure("shuji","start-shuji","end-shuji")}};const T=async e=>{try{const r=(e=>{const t={};return Object.keys(w.defaultOptions).forEach((r=>{e.hasOwnProperty(r)&&(t[r]=e[r])})),b.logger().debug(`parsed user options: ${JSON.stringify(t)}`),t})((e=>{const r=h.default(e).scriptName("shuji").wrap(h.default.terminalWidth()).help("help").alias("help","h").showHelpOnFail(!1,"whoops, something went wrong! try running with --help").epilogue("for more information, check out the documentation at https://github.com/ermish/shuji").version("v","shuji version",g.version??"unable to verify. check your package.json").alias("version","v").config("config",'path to a Shuji ".shujirc.json" or ".shujirc" config file ',(function(e){return JSON.parse(t(e,"utf-8"))})).alias("c","config").example([['$0 -c="./.shujirc"',"importing config file."],["$0 --inputPath=./src/markdown/ --outputPath=./src/jsxPages/ --config=./.shujirc.json","Full example"]]).option("logLevel",{alias:"l",choices:[1,2,3],describe:"Set the log level. 1=debug mode, 2=default, 3= no logs",default:2,type:"number"}).group(["inputPath","outputPath","reactContextName","reactContextVarName","deleteExistingOutputFolder"],"Config Parameters:").option("inputPath",{alias:"i",describe:"Target folder or file with .md files for Shuji to parse",type:"string"}).option("outputPath",{alias:"o",describe:"Output destination folder to write the compiled .jsx files",type:"string"}).option("reactContextName",{alias:"rc",describe:"The react context name in which any detected front-matter will be set through useContext('${reactContextName}')",type:"string"}).option("reactContextVarName",{alias:"rcv",describe:"The name of the react context object and set method assigned from useContext('${reactContextName}'). ex. const [${yourVar}, set${YourVar}]",type:"string"}).option("deleteExistingOutputFolder",{alias:"del",describe:"Delete existing content in the output folder (outputFolderPath) before writing compiled files",type:"boolean"}).argv;return b.setLogLevel(r.logLevel),b.logger().debug(`cli args: ${JSON.stringify(r)}`),r})(e));await w.transformMarkdownFiles(r)}catch(e){b.logger().error("An unknown error occurred! Try using a markdown validator to ensure your mardown files are valid",e)}};module.exports.cli=T,T(process.argv);
//# sourceMappingURL=cli.js.map
