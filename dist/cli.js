#! /usr/bin/env node
var e=require("yargs"),{readFileSync:t,promises:r}=require("fs"),{PerformanceEntry:a,PerformanceObserver:o,performance:n}=require("perf_hooks"),i=require("react"),{renderToStaticMarkup:s}=require("react-dom/server"),l=require("react-markdown"),c=require("gray-matter"),{stringify:d}=require("json5"),u=require("chalk"),{extname:m,basename:f}=require("path");Object.defineProperty(module.exports,"__esModule",{value:!0}),module.exports.cli=void 0;var p,h,g=(p=e)&&p.__esModule?p:{default:p};h=JSON.parse('{"name":"@ermish/shuji","version":"1.3.4","author":"ermish <philipermish@gmail.com>","license":"MIT","description":"A Markdown to React JSX converter","keywords":["react","markdown","template","remark","jsx","front matter","converter"],"engines":{"node":">14"},"repository":"https://github.com/Ermish/shuji","bin":{"shuji":"./dist/cli.js"},"collaborators":["ermish <philipermish@gmail.com>"],"files":["dist/","package.json","license","README.md"],"publishConfig":{"access":"public"},"scripts":{"build":"yarn && parcel build ./src/index.ts ./src/cli.ts --dist-dir dist","start":"node ./dist/cli.js -i=\'./src/samples\' --reacthelmet=\'reactHead\'","lint":"eslint ./src/**.js","test":"jest --verbose","cli":""},"dependencies":{"chalk":"^4.1.1","fs-extra":"^10.0.0","gray-matter":"^4.0.2","json5":"^2.2.0","react":"^17.0.2","react-dom":"^17.0.2","react-markdown":"^6.0.2","yargs":"^17.0.1"},"devDependencies":{"@babel/core":"^7.14.0","@babel/preset-env":"^7.12.11","@babel/preset-react":"^7.13.13","@babel/preset-typescript":"^7.13.0","@tsconfig/node16":"^1.0.1","@types/fs-extra":"^9.0.11","@types/jest":"^26.0.20","@types/json5":"^2.2.0","@types/klaw":"^3.0.1","@types/react":"^17.0.0","@types/react-dom":"^17.0.0","babel-jest":"^26.6.3","eslint":"^7.27.0","eslint-config-prettier":"^7.1.0","jest":"^26.6.3","parcel":"^2.0.0-beta.3.1","sass":"^1.32.0","stylelint":"^13.8.0","stylelint-config-recommended":"^3.0.0","stylelint-order":"^4.1.0","stylelint-scss":"^3.18.0","typescript":"^4.2.4"}}');var w={};Object.defineProperty(w,"__esModule",{value:!0}),w.transformMarkdownFiles=w.transformMarkdownString=w.defaultOptions=void 0;var y={};Object.defineProperty(y,"__esModule",{value:!0}),y.convertMarkdownToJSX=y.convertMarkdownFilesToJSXFiles=void 0;var v=$(i),b=$(l),j=$(c),x={};Object.defineProperty(x,"__esModule",{value:!0}),x.logger=function(){const e=M.default.hex("#6C63A2");return{debug:t=>{if(k>1)return;const r=M.default.hex("#58a6ff");console.log(e("Shuji: ")+r(t))},info:t=>{if(k>2)return;const r=M.default.hex("#58a6ff");console.log(e("Shuji: ")+r(t))},warn:t=>{if(k>2)return;const r=M.default.hex("#FFA500");console.log(e("Shuji: ")+r(t))},error:(t,r)=>{if(k>2)return;const a=M.default.hex("#ff7b72"),o=r?t+`\n actual error: ${r.message} \n ${r.stack}`:t;console.log(e("Shuji: ")+a(o))}}},x.setLogLevel=function(e){k=e};var M=function(e){return e&&e.__esModule?e:{default:e}}(u);let k=2;function $(e){return e&&e.__esModule?e:{default:e}}y.convertMarkdownFilesToJSXFiles=async(e,t,r,a)=>await Promise.all(e.map((async e=>{const o=S(e.data,t,r,a),n=F(o.markdownString),i=C(o.componentNameFromFrontMatter??e.fileName,n,t,o.frontMatterJsxString,a);return{fileName:e.fileName,data:i}})));y.convertMarkdownToJSX=async(e,t,r,a,o)=>{const n=S(e,r,a,o),i=F(n.markdownString);return C(t,i,r,n.frontMatterJsxString,o)};const F=e=>{try{const t=s(v.default.createElement(b.default,{children:e}));return t.replace(/(\n|\r)/g,(e=>e+"\t\t\t"))}catch(e){throw x.logger().error(`error converting markdown to jsx: ${e}`),new e}},S=(e,t,r,a)=>{try{const{data:o,content:n}=j.default(e),i=N(o,t,r,a);return{frontMatterJsxString:i,markdownString:n,componentNameFromFrontMatter:o["react-component-name"]}}catch(e){throw x.logger().error(`failed to extract front matter: ${e}`),new e}},N=(e,t,r,a)=>Object.keys(e).length<1?"":"reacthead"==t?O(e,r,a):"reacthelmet"==t?P(e):"",C=(e,t,r,a,o)=>{const n=e.replace(/^\w/,(e=>e.toUpperCase()));return(a?"reacthelmet"==r?"import { Helmet } from 'react-helmet'\n\n":`import { ${o} } from 'reactHead'\n\n`:"")+`const ${n} = () => { \n  ${"reacthelmet"==r?"":a}\n    return (\n        <div className='${e.replace(/^\w/,(e=>e.toLowerCase()))}'>\n        ${a&&"none"!=r?`${a}\n\t\t`:""}\t${t}\n        </div>\n    )\n}\n    \nexport default ${n}`},P=e=>{if(!e)return"";let t="";for(const r in e){const a=e[r];let o=d(a).replace(/]|[|'[]/g,"");switch(r){case"title":t+=`\n\t\t\t\t<title>${o}</title>`;break;case"description":t+=`\n\t\t\t\t<meta name="description" content="${o}" />`;break;case"author":t+=`\n\t\t\t\t<meta name="author" content="${o}" />`;break;case"keywords":t+=`\n\t\t\t\t<meta name="keywords" content="${o}" />`;break;case"react-component-name":break;default:t+=`\n\t\t\t\t<meta name="${r}" content="${o}" />`}}return`\t<Helmet>\t\t${t}\n\t\t\t</Helmet>`},O=(e,t,r)=>{if(!e)return"";const a=t.replace(/[^\w]/g,""),o="set"+a.replace(/^\w/,(e=>e.toUpperCase())),n=a.replace(/^\w/,(e=>e.toLowerCase()));let i="";for(const t in e){const r=e[t];let a=d(r);const o=t.replace(/[^\w]/g,"");"reactcomponentname"!==o.toLowerCase()&&(i+=`\t\t${o} = ${a}, \n`)}return`\n\tconst [${n}, ${o}] = useContext('${r}')\n\n\t${o}({\n\t\t...${n},\n${i}\t})`};var H={};Object.defineProperty(H,"__esModule",{value:!0}),H.writeJsxFiles=H.getMdFilesFromFolder=void 0;H.getMdFilesFromFolder=async e=>{let t=[];try{const a=(await r.lstat(e)).isDirectory(),o=a?await r.readdir(e):[f(e)];if(o.length<1)return x.logger().warn(`No .md files found in '${e}'`),t;x.logger().info(`Processing ${o.length} file${o.length>1?"s":""} from "${e}"...`),t=await o.reduce((async(t,o)=>{const n=await t;if(".md"!=m(o))return n;const i=a?`${e}/${o}`:e,s=await r.readFile(i);return n.push({fileName:f(o,".md"),data:s.toString()}),n}),Promise.resolve([]))}catch(t){x.logger().warn(`No .md files found in inputPath: '${e}'`)}return t};H.writeJsxFiles=async(e,t,a)=>{try{if(t.length<=0)return;a&&await r.rmdir(e),x.logger().info(`Generating ${t.length} file${t.length>1?"s":""} in "${e}"...`),await r.mkdir(e,{recursive:!0}),await Promise.all(t.map((async t=>{await r.writeFile(`${e}/${t.fileName}.jsx`,t.data,"utf8")})))}catch(e){x.logger().error(`error writing markdown files: ${e}`)}};var J=o,_=n;const T={inputPath:"markdown",outputPath:"jsxMarkdown",frontMatterMode:"reacthelmet",reactHeadContextName:"ReactHeadContext",reactHeadContextVarName:"reactHead",deleteExistingOutputFolder:!1};w.defaultOptions=T;new J((e=>{e.getEntries().forEach((e=>{const t=parseInt(e.duration);"shuji"!=e.name?x.logger().debug(`${e.name} finished in ${t}ms.`):x.logger().info(`Done in ${t}ms.`)}))})).observe({entryTypes:["measure"],buffer:!0});w.transformMarkdownString=async(e,t,r)=>{try{var a;_.mark("start-shuji");const o={...T,...r,frontMatterMode:(null==r||null===(a=r.frontMatterMode)||void 0===a?void 0:a.toLowerCase())??T.frontMatterMode};return await y.convertMarkdownToJSX(e,t,o.frontMatterMode,o.reactHeadContextVarName,o.reactHeadContextName)}catch(e){return""}finally{_.mark("end-shuji"),_.measure("shuji","start-shuji","end-shuji")}};w.transformMarkdownFiles=async e=>{try{var t;_.mark("start-shuji");const r={...T,...e,frontMatterMode:(null==e||null===(t=e.frontMatterMode)||void 0===t?void 0:t.toLowerCase())??T.frontMatterMode},a=await H.getMdFilesFromFolder(r.inputPath),o=await y.convertMarkdownFilesToJSXFiles(a,r.frontMatterMode,r.reactHeadContextVarName,r.reactHeadContextName);return await H.writeJsxFiles(r.outputPath,o,r.deleteExistingOutputFolder),0}catch(e){return 1}finally{_.mark("end-shuji"),_.measure("shuji","start-shuji","end-shuji")}};const E=async e=>{try{const r=(e=>{const t={};return Object.keys(w.defaultOptions).forEach((r=>{e.hasOwnProperty(r)&&(t[r]=e[r])})),x.logger().debug(`parsed user options: ${JSON.stringify(t)}`),t})((e=>{const r=g.default(e).scriptName("shuji").wrap(g.default.terminalWidth()).help("help").alias("help","h").showHelpOnFail(!1,"whoops, something went wrong! try running with --help").epilogue("for more information, check out the documentation at https://github.com/ermish/shuji").version("v","shuji version",h.version??"unable to verify. check your package.json").alias("version","v").config("config",'path to a Shuji ".shujirc.json" or ".shujirc" config file ',(function(e){return JSON.parse(t(e,"utf-8"))})).alias("c","config").example([['$0 -c="./.shujirc"',"importing config file."],["$0 --inputPath=./src/markdown/ --outputPath=./src/jsxPages/ --config=./.shujirc.json","Full example"]]).option("logLevel",{alias:"l",choices:[1,2,3],describe:"Set the log level. 1=debug mode, 2=default, 3= no logs",default:2,type:"number"}).group(["inputPath","outputPath","frontMatterMode","reactHeadContextName","reactHeadContextVarName","deleteExistingOutputFolder"],"Config Parameters:").option("inputPath",{alias:"i",describe:"Target folder or file with .md files for Shuji to parse",type:"string"}).option("outputPath",{alias:"o",describe:"Output destination folder to write the compiled .jsx files",type:"string"}).option("frontMatterMode",{alias:"fm",choices:["reacthelmet","reacthead","none"],describe:'Toggle output style of front matter. "reacthelmet" uses react helmet syntax. "reactHead" will creat a react context you have more control over. This is referred to as "reactHead"',type:"string"}).option("reactHeadContextName",{alias:"rc",describe:"The react context name in which any detected front-matter will be set through useContext('${reactContextName}')",type:"string"}).option("reactHeadContextVarName",{alias:"rcv",describe:"The name of the react context object and set method assigned from useContext('${reactContextName}'). ex. const [${yourVar}, set${YourVar}]",type:"string"}).option("deleteExistingOutputFolder",{alias:"del",describe:"Delete existing content in the output folder (outputFolderPath) before writing compiled files",type:"boolean"}).argv;return x.setLogLevel(r.logLevel),x.logger().debug(`cli args: ${JSON.stringify(r)}`),r})(e));await w.transformMarkdownFiles(r)}catch(e){x.logger().error("An unknown error occurred! Try using a markdown validator to ensure your mardown files are valid",e)}};module.exports.cli=E,E(process.argv);
//# sourceMappingURL=cli.js.map
