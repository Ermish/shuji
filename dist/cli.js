#! /usr/bin/env node
var e=require("yargs"),{readFileSync:t,promises:r}=require("fs"),{PerformanceObserver:o,performance:a}=require("perf_hooks"),n=require("react"),{renderToStaticMarkup:i}=require("react-dom/server"),s=require("react-markdown"),c=require("gray-matter"),{stringify:l}=require("json5"),d=require("chalk"),{extname:u,basename:m}=require("path");Object.defineProperty(module.exports,"__esModule",{value:!0}),module.exports.cli=void 0;var f,p,h=(f=e)&&f.__esModule?f:{default:f};p=JSON.parse('{"name":"@ermish/shuji","version":"1.3.5","author":"ermish <philipermish@gmail.com>","license":"MIT","description":"A Markdown to React JSX converter","keywords":["react","markdown","template","remark","jsx","front matter","converter"],"engines":{"node":">14"},"repository":"https://github.com/Ermish/shuji","bin":{"shuji":"./dist/cli.js"},"collaborators":["ermish <philipermish@gmail.com>"],"files":["dist/","package.json","license","README.md"],"publishConfig":{"access":"public"},"scripts":{"build":"yarn && parcel build ./src/index.ts ./src/cli.ts --dist-dir dist","start":"node ./dist/cli.js -i=\'./src/samples\' --fm=\'object\'","lint":"eslint ./src/**.js","test":"jest --verbose","cli":""},"dependencies":{"chalk":"^4.1.1","fs-extra":"^10.0.0","gray-matter":"^4.0.2","json5":"^2.2.0","react":"^17.0.2","react-dom":"^17.0.2","react-markdown":"^6.0.2","yargs":"^17.0.1"},"devDependencies":{"@babel/core":"^7.14.0","@babel/preset-env":"^7.12.11","@babel/preset-react":"^7.13.13","@babel/preset-typescript":"^7.13.0","@tsconfig/node16":"^1.0.1","@types/fs-extra":"^9.0.11","@types/jest":"^26.0.20","@types/json5":"^2.2.0","@types/klaw":"^3.0.1","@types/react":"^17.0.0","@types/react-dom":"^17.0.0","babel-jest":"^26.6.3","eslint":"^7.27.0","eslint-config-prettier":"^7.1.0","jest":"^26.6.3","parcel":"^2.0.0-beta.3.1","sass":"^1.32.0","stylelint":"^13.8.0","stylelint-config-recommended":"^3.0.0","stylelint-order":"^4.1.0","stylelint-scss":"^3.18.0","typescript":"^4.2.4"}}');var g={};Object.defineProperty(g,"__esModule",{value:!0}),g.transformMarkdownFiles=g.transformMarkdownStringWithFMObject=g.transformMarkdownString=g.defaultOptions=void 0;var w={};Object.defineProperty(w,"__esModule",{value:!0}),w.convertMarkdownToJSXAndObject=w.convertMarkdownToJSX=w.convertMarkdownFilesToJSXFiles=w.frontMatterModeEnum=void 0;var M=$(n),j=$(s),y=$(c),b={};Object.defineProperty(b,"__esModule",{value:!0}),b.logger=function(){const e=v.default.hex("#6C63A2");return{debug:t=>{if(x>1)return;const r=v.default.hex("#58a6ff");console.log(e("Shuji: ")+r(t))},info:t=>{if(x>2)return;const r=v.default.hex("#58a6ff");console.log(e("Shuji: ")+r(t))},warn:t=>{if(x>2)return;const r=v.default.hex("#FFA500");console.log(e("Shuji: ")+r(t))},error:(t,r)=>{if(x>2)return;const o=v.default.hex("#ff7b72"),a=r?t+`\n actual error: ${r.message} \n ${r.stack}`:t;console.log(e("Shuji: ")+o(a))}}},b.setLogLevel=function(e){x=e};var v=function(e){return e&&e.__esModule?e:{default:e}}(d);let k,x=2;function $(e){return e&&e.__esModule?e:{default:e}}var F;w.frontMatterModeEnum=k,(F=k||(w.frontMatterModeEnum=k={})).object="object",F.reactHead="reacthead",F.reactHelmet="reacthelmet",F.none="none";w.convertMarkdownFilesToJSXFiles=async(e,t,r,o)=>await Promise.all(e.map((async e=>{const a=N(e.data,t,r,o),n=S(a.markdownString),i=H(a.componentNameFromFrontMatter??e.fileName,n,t,a.frontMatterJsxString,a.frontMatterObject,o);return{fileName:e.fileName,data:i}})));w.convertMarkdownToJSX=async(e,t,r,o,a)=>{const n=N(e,t,r,o),i=S(n.markdownString);if(null==a&&null==n.componentNameFromFrontMatter)throw new Error("You must provide a component name eithe through front matter or as a parameter");return H(a??n.componentNameFromFrontMatter,i,t,n.frontMatterJsxString,n.frontMatterObject,o)};w.convertMarkdownToJSXAndObject=async(e,t,r,o)=>{const a=N(e,k.object,t,r),n=S(a.markdownString);if(null==o&&null==a.componentNameFromFrontMatter)throw new Error("You must provide a component name eithe through front matter or as a parameter");return[H(o??a.componentNameFromFrontMatter,n,k.object,void 0,a.frontMatterObject,r),a.frontMatterObject]};const S=e=>{try{const t=i(M.default.createElement(j.default,{children:e}));return t.replace(/(\n|\r)/g,(e=>e+"\t\t\t"))}catch(e){throw b.logger().error(`error converting markdown to jsx: ${e}`),new e}},N=(e,t,r,o)=>{try{const{data:a,content:n}=y.default(e),i=t==k.object?a:void 0,s=t==k.reactHead||t==k.reactHelmet?O(a,t,r,o):void 0;return{frontMatterJsxString:s,frontMatterObject:i,markdownString:n,componentNameFromFrontMatter:a["react-component-name"]??a.title}}catch(e){throw b.logger().error(`failed to extract front matter: ${e}`),new e}},O=(e,t,r,o)=>Object.keys(e).length<1?"":t==k.reactHead?P(e,r,o):t==k.reactHelmet?C(e):"",H=(e,t,r,o,a,n)=>{const i=e.replace(/^\w/,(e=>e.toUpperCase())),s=e.replace(/^\w/,(e=>e.toLowerCase()));return(o?r==k.reactHelmet?"import { Helmet } from 'react-helmet'\n\n":`import { useContext } from 'react'\nimport { ${n} } from 'reactHead'\n\n`:"")+`const ${i} = () => { \n  ${r==k.reactHead?`${o}\n`:""}\n    return (\n        <div className='${s}'>\n        ${o&&r==k.reactHelmet?`${o}\n\t\t`:""}\t${t}\n        </div>\n    )\n}\n    ${a?`\nexport const frontMatter = ${JSON.stringify(a,null," ")}\n`:""}\n    \nexport default ${i}`},C=e=>{if(!e)return"";let t="";for(const r in e){const o=e[r];let a=l(o).replace(/]|[|'[]/g,"");switch(r){case"title":t+=`\n\t\t\t\t<title>${a}</title>`;break;case"description":t+=`\n\t\t\t\t<meta name="description" content="${a}" />`;break;case"author":t+=`\n\t\t\t\t<meta name="author" content="${a}" />`;break;case"keywords":t+=`\n\t\t\t\t<meta name="keywords" content="${a}" />`;break;case"react-component-name":break;default:t+=`\n\t\t\t\t<meta name="${r}" content="${a}" />`}}return`\t<Helmet>\t\t${t}\n\t\t\t</Helmet>`},P=(e,t,r)=>{if(!e)return"";const o=t.replace(/[^\w]/g,""),a="set"+o.replace(/^\w/,(e=>e.toUpperCase())),n=o.replace(/^\w/,(e=>e.toLowerCase()));let i="";for(const t in e){const r=e[t];let o=l(r);const a=t.replace(/[^\w]/g,"");"reactcomponentname"!==a.toLowerCase()&&(i+=`\t\t${a} = ${o}, \n`)}return`\n\tconst [${n}, ${a}] = useContext(${r})\n\n\t${a}({\n\t\t...${n},\n${i}\t})`};var J={};Object.defineProperty(J,"__esModule",{value:!0}),J.writeJsxFiles=J.getMdFilesFromFolder=void 0;J.getMdFilesFromFolder=async e=>{let t=[];try{const o=(await r.lstat(e)).isDirectory(),a=o?await r.readdir(e):[m(e)];if(a.length<1)return b.logger().warn(`No .md files found in '${e}'`),t;b.logger().info(`Processing ${a.length} file${a.length>1?"s":""} from "${e}"...`),t=await a.reduce((async(t,a)=>{const n=await t;if(".md"!=u(a))return n;const i=o?`${e}/${a}`:e,s=await r.readFile(i);return n.push({fileName:m(a,".md"),data:s.toString()}),n}),Promise.resolve([]))}catch(t){b.logger().warn(`No .md files found in inputPath: '${e}'`)}return t};J.writeJsxFiles=async(e,t,o)=>{try{if(t.length<=0)return;o&&await r.rmdir(e),b.logger().info(`Generating ${t.length} file${t.length>1?"s":""} in "${e}"...`),await r.mkdir(e,{recursive:!0}),await Promise.all(t.map((async t=>{await r.writeFile(`${e}/${t.fileName}.jsx`,t.data,"utf8")})))}catch(e){b.logger().error(`error writing markdown files: ${e}`)}};var T=a,E=o;const _={inputPath:"markdown",outputPath:"jsxMarkdown",frontMatterMode:"reacthelmet",reactHeadContextName:"ReactHeadContext",reactHeadContextVarName:"reactHead",deleteExistingOutputFolder:!1};g.defaultOptions=_;new E((e=>{e.getEntries().forEach((e=>{const t=parseInt(e.duration),r=(new Date).toLocaleTimeString();"shuji"!=e.name?b.logger().debug(`${e.name} finished in ${t}ms. [${r}]`):b.logger().info(`Done in ${t}ms. [${r}]`)}))})).observe({entryTypes:["measure"],buffer:!0});g.transformMarkdownString=async(e,t,r)=>{try{var o;T.mark("start-shuji");const a={..._,...r,frontMatterMode:(null==r||null===(o=r.frontMatterMode)||void 0===o?void 0:o.toLowerCase())??_.frontMatterMode};return await w.convertMarkdownToJSX(e,a.frontMatterMode,a.reactHeadContextVarName,a.reactHeadContextName,t)}catch(e){return""}finally{T.mark("end-shuji"),T.measure("shuji","start-shuji","end-shuji")}};g.transformMarkdownStringWithFMObject=async(e,t,r)=>{try{var o;T.mark("start-shuji");const a={..._,...r,frontMatterMode:(null==r||null===(o=r.frontMatterMode)||void 0===o?void 0:o.toLowerCase())??_.frontMatterMode},[n,i]=await w.convertMarkdownToJSXAndObject(e,a.reactHeadContextVarName,a.reactHeadContextName,t);return[n,i]}catch(e){throw new Error(`Any error occurred transforming your markdown: ${e}`)}finally{T.mark("end-shuji"),T.measure("shuji","start-shuji","end-shuji")}};g.transformMarkdownFiles=async e=>{try{var t;T.mark("start-shuji");const r={..._,...e,frontMatterMode:(null==e||null===(t=e.frontMatterMode)||void 0===t?void 0:t.toLowerCase())??_.frontMatterMode},o=await J.getMdFilesFromFolder(r.inputPath),a=await w.convertMarkdownFilesToJSXFiles(o,r.frontMatterMode,r.reactHeadContextVarName,r.reactHeadContextName);return await J.writeJsxFiles(r.outputPath,a,r.deleteExistingOutputFolder),0}catch(e){return 1}finally{T.mark("end-shuji"),T.measure("shuji","start-shuji","end-shuji")}};const L=async e=>{try{const r=(e=>{const t={};return Object.keys(g.defaultOptions).forEach((r=>{e.hasOwnProperty(r)&&(t[r]=e[r])})),b.logger().debug(`parsed user options: ${JSON.stringify(t)}`),t})((e=>{const r=h.default(e).scriptName("shuji").wrap(h.default.terminalWidth()).help("help").alias("help","h").showHelpOnFail(!1,"whoops, something went wrong! try running with --help").epilogue("for more information, check out the documentation at https://github.com/ermish/shuji").version("v","shuji version",p.version??"unable to verify. check your package.json").alias("version","v").config("config",'path to a Shuji ".shujirc.json" or ".shujirc" config file ',(function(e){return JSON.parse(t(e,"utf-8"))})).alias("c","config").example([['$0 -c="./.shujirc"',"importing config file."],["$0 --inputPath=./src/markdown/ --outputPath=./src/jsxPages/ --config=./.shujirc.json","Full example"]]).option("logLevel",{alias:"l",choices:[1,2,3],describe:"Set the log level. 1=debug mode, 2=default, 3= no logs",default:2,type:"number"}).group(["inputPath","outputPath","deleteExistingOutputFolder","frontMatterMode","reactHeadContextName","reactHeadContextVarName"],"Config Parameters:").option("inputPath",{alias:"i",describe:"Target folder or file with .md files for Shuji to parse",type:"string"}).option("outputPath",{alias:"o",describe:"Output destination folder to write the compiled .jsx files",type:"string"}).option("deleteExistingOutputFolder",{alias:"del",describe:"Delete existing content in the output folder (outputFolderPath) before writing compiled files",type:"boolean"}).option("frontMatterMode",{alias:"fm",choices:["reacthelmet","reacthead","object","none"],describe:'Toggle output style of front matter. "reacthelmet" uses react helmet syntax.\n "reactHead" will create a react context called "reactHead" you have more control over. \n "object" will export the front matter as a js object. "none" will ignore front matter.',type:"string"}).option("reactHeadContextName",{alias:"rc",describe:"reactHead mode option: The react context name in which any detected front-matter will be set through useContext('${reactContextName}')",type:"string"}).option("reactHeadContextVarName",{alias:"rcv",describe:"reactHead mode option: The name of the react context object and set method assigned from useContext('${reactContextName}'). ex. const [${yourVar}, set${YourVar}]",type:"string"}).argv;return b.setLogLevel(r.logLevel),b.logger().debug(`cli args: ${JSON.stringify(r)}`),r})(e));await g.transformMarkdownFiles(r)}catch(e){b.logger().error("An unknown error occurred! Try using a markdown validator to ensure your mardown files are valid",e)}};module.exports.cli=L,L(process.argv);
//# sourceMappingURL=cli.js.map
