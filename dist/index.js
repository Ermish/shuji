var{PerformanceObserver:e,performance:t}=require("perf_hooks"),r=require("react"),{renderToStaticMarkup:n}=require("react-dom/server"),o=require("react-markdown"),a=require("gray-matter"),{stringify:i}=require("json5"),s=require("chalk"),{promises:c}=require("fs"),{extname:l,basename:d}=require("path");Object.defineProperty(module.exports,"__esModule",{value:!0}),module.exports.transformMarkdownFiles=module.exports.transformMarkdownStringWithFMObject=module.exports.transformMarkdownString=module.exports.defaultOptions=void 0;var u={};Object.defineProperty(u,"__esModule",{value:!0}),u.convertMarkdownToJSXAndObject=u.convertMarkdownToJSX=u.convertMarkdownFilesToJSXFiles=u.frontMatterModeEnum=void 0;var m=v(r),f=v(o),w=v(a),M={};Object.defineProperty(M,"__esModule",{value:!0}),M.logger=function(){const e=g.default.hex("#6C63A2");return{debug:t=>{if($>1)return;const r=g.default.hex("#58a6ff");console.log(e("Shuji: ")+r(t))},info:t=>{if($>2)return;const r=g.default.hex("#58a6ff");console.log(e("Shuji: ")+r(t))},warn:t=>{if($>2)return;const r=g.default.hex("#FFA500");console.log(e("Shuji: ")+r(t))},error:(t,r)=>{if($>2)return;const n=g.default.hex("#ff7b72"),o=r?t+`\n actual error: ${r.message} \n ${r.stack}`:t;console.log(e("Shuji: ")+n(o))}}},M.setLogLevel=function(e){$=e};var h,g=(h=s)&&h.__esModule?h:{default:h};let p,$=2;function v(e){return e&&e.__esModule?e:{default:e}}var j;u.frontMatterModeEnum=p,(j=p||(u.frontMatterModeEnum=p={})).object="object",j.reactHead="reacthead",j.reactHelmet="reacthelmet",j.none="none";u.convertMarkdownFilesToJSXFiles=async(e,t,r,n)=>await Promise.all(e.map((async e=>{const o=x(e.data,t,r,n),a=k(o.markdownString),i=y(o.componentNameFromFrontMatter??e.fileName,a,t,o.frontMatterJsxString,o.frontMatterObject,n);return{fileName:e.fileName,data:i}})));u.convertMarkdownToJSX=async(e,t,r,n,o)=>{const a=x(e,t,r,n),i=k(a.markdownString);if(null==o&&null==a.componentNameFromFrontMatter)throw new Error("You must provide a component name eithe through front matter or as a parameter");return y(o??a.componentNameFromFrontMatter,i,t,a.frontMatterJsxString,a.frontMatterObject,n)};u.convertMarkdownToJSXAndObject=async(e,t,r,n)=>{const o=x(e,p.object,t,r),a=k(o.markdownString);if(null==n&&null==o.componentNameFromFrontMatter)throw new Error("You must provide a component name eithe through front matter or as a parameter");return[y(n??o.componentNameFromFrontMatter,a,p.object,void 0,o.frontMatterObject,r),o.frontMatterObject]};const k=e=>{try{const t=n(m.default.createElement(f.default,{children:e}));return t.replace(/(\n|\r)/g,(e=>e+"\t\t\t"))}catch(e){throw M.logger().error(`error converting markdown to jsx: ${e}`),new e}},x=(e,t,r,n)=>{try{const{data:o,content:a}=w.default(e),i=t==p.object?o:void 0,s=t==p.reactHead||t==p.reactHelmet?F(o,t,r,n):void 0;return{frontMatterJsxString:s,frontMatterObject:i,markdownString:a,componentNameFromFrontMatter:o["react-component-name"]??o.title}}catch(e){throw M.logger().error(`failed to extract front matter: ${e}`),new e}},F=(e,t,r,n)=>Object.keys(e).length<1?"":t==p.reactHead?S(e,r,n):t==p.reactHelmet?b(e):"",y=(e,t,r,n,o,a)=>{const i=e.replace(/^\w/,(e=>e.toUpperCase())),s=e.replace(/^\w/,(e=>e.toLowerCase()));return(n?r==p.reactHelmet?"import { Helmet } from 'react-helmet'\n\n":`import { useContext } from 'react'\nimport { ${a} } from 'reactHead'\n\n`:"")+`const ${i} = () => { \n  ${r==p.reactHead?`${n}\n`:""}\n    return (\n        <div className='${s}'>\n        ${n&&r==p.reactHelmet?`${n}\n\t\t`:""}\t${t}\n        </div>\n    )\n}\n    ${o?`\nexport const frontMatter = ${JSON.stringify(o,null," ")}\n`:""}\n    \nexport default ${i}`},b=e=>{if(!e)return"";let t="";for(const r in e){const n=e[r];let o=i(n).replace(/]|[|'[]/g,"");switch(r){case"title":t+=`\n\t\t\t\t<title>${o}</title>`;break;case"description":t+=`\n\t\t\t\t<meta name="description" content="${o}" />`;break;case"author":t+=`\n\t\t\t\t<meta name="author" content="${o}" />`;break;case"keywords":t+=`\n\t\t\t\t<meta name="keywords" content="${o}" />`;break;case"react-component-name":break;default:t+=`\n\t\t\t\t<meta name="${r}" content="${o}" />`}}return`\t<Helmet>\t\t${t}\n\t\t\t</Helmet>`},S=(e,t,r)=>{if(!e)return"";const n=t.replace(/[^\w]/g,""),o="set"+n.replace(/^\w/,(e=>e.toUpperCase())),a=n.replace(/^\w/,(e=>e.toLowerCase()));let s="";for(const t in e){const r=e[t];let n=i(r);const o=t.replace(/[^\w]/g,"");"reactcomponentname"!==o.toLowerCase()&&(s+=`\t\t${o} = ${n}, \n`)}return`\n\tconst [${a}, ${o}] = useContext(${r})\n\n\t${o}({\n\t\t...${a},\n${s}\t})`};var H={};Object.defineProperty(H,"__esModule",{value:!0}),H.writeJsxFiles=H.getMdFilesFromFolder=void 0;H.getMdFilesFromFolder=async e=>{let t=[];try{const r=(await c.lstat(e)).isDirectory(),n=r?await c.readdir(e):[d(e)];if(n.length<1)return M.logger().warn(`No .md files found in '${e}'`),t;M.logger().info(`Processing ${n.length} file${n.length>1?"s":""} from "${e}"...`),t=await n.reduce((async(t,n)=>{const o=await t;if(".md"!=l(n))return o;const a=r?`${e}/${n}`:e,i=await c.readFile(a);return o.push({fileName:d(n,".md"),data:i.toString()}),o}),Promise.resolve([]))}catch(t){M.logger().warn(`No .md files found in inputPath: '${e}'`)}return t};H.writeJsxFiles=async(e,t,r)=>{try{if(t.length<=0)return;r&&await c.rmdir(e),M.logger().info(`Generating ${t.length} file${t.length>1?"s":""} in "${e}"...`),await c.mkdir(e,{recursive:!0}),await Promise.all(t.map((async t=>{await c.writeFile(`${e}/${t.fileName}.jsx`,t.data,"utf8")})))}catch(e){M.logger().error(`error writing markdown files: ${e}`)}};var N=t,O=e;const C={inputPath:"markdown",outputPath:"jsxMarkdown",frontMatterMode:"reacthelmet",reactHeadContextName:"ReactHeadContext",reactHeadContextVarName:"reactHead",deleteExistingOutputFolder:!1};module.exports.defaultOptions=C;new O((e=>{e.getEntries().forEach((e=>{const t=parseInt(e.duration),r=(new Date).toLocaleTimeString();"shuji"!=e.name?M.logger().debug(`${e.name} finished in ${t}ms. [${r}]`):M.logger().info(`Done in ${t}ms. [${r}]`)}))})).observe({entryTypes:["measure"],buffer:!0});module.exports.transformMarkdownString=async(e,t,r)=>{try{var n;N.mark("start-shuji");const o={...C,...r,frontMatterMode:(null==r||null===(n=r.frontMatterMode)||void 0===n?void 0:n.toLowerCase())??C.frontMatterMode};return await u.convertMarkdownToJSX(e,o.frontMatterMode,o.reactHeadContextVarName,o.reactHeadContextName,t)}catch(e){return""}finally{N.mark("end-shuji"),N.measure("shuji","start-shuji","end-shuji")}};module.exports.transformMarkdownStringWithFMObject=async(e,t,r)=>{try{var n;N.mark("start-shuji");const o={...C,...r,frontMatterMode:(null==r||null===(n=r.frontMatterMode)||void 0===n?void 0:n.toLowerCase())??C.frontMatterMode},[a,i]=await u.convertMarkdownToJSXAndObject(e,o.reactHeadContextVarName,o.reactHeadContextName,t);return[a,i]}catch(e){throw new Error(`Any error occurred transforming your markdown: ${e}`)}finally{N.mark("end-shuji"),N.measure("shuji","start-shuji","end-shuji")}};module.exports.transformMarkdownFiles=async e=>{try{var t;N.mark("start-shuji");const r={...C,...e,frontMatterMode:(null==e||null===(t=e.frontMatterMode)||void 0===t?void 0:t.toLowerCase())??C.frontMatterMode},n=await H.getMdFilesFromFolder(r.inputPath),o=await u.convertMarkdownFilesToJSXFiles(n,r.frontMatterMode,r.reactHeadContextVarName,r.reactHeadContextName);return await H.writeJsxFiles(r.outputPath,o,r.deleteExistingOutputFolder),0}catch(e){return 1}finally{N.mark("end-shuji"),N.measure("shuji","start-shuji","end-shuji")}};
//# sourceMappingURL=index.js.map
