var e=require("path"),t=require("fs"),r=require("json5"),o=require("gray-matter"),a=require("react-markdown"),n=require("react-dom/server"),i=require("react");Object.defineProperty(exports,"__esModule",{value:!0});var s=(J=void 0,exports.defaultOptions=J);exports.compileMarkdown=s;var l={};Object.defineProperty(l,"__esModule",{value:!0});var c=(g=void 0,l.convertMarkdownFilesToJSXFiles=g);l.convertMarkdownToJSX=c;var d=f(i),u=n,m=f(a),w=f(o),p=r;function f(e){return e&&e.__esModule?e:{default:e}}var g=async(e,t,r)=>await Promise.all(e.map(async e=>{const o=x(e.data,t,r),a=v(o.markdownString),n=h(e.fileName,a,o.frontMatterJsxString);return{fileName:e.fileName,data:n}}));l.convertMarkdownFilesToJSXFiles=g;c=async(e,t,r)=>{const o=x(e,t,r),a=v(o.markdownString);return{frontMatterJsxString:o.frontMatterJsxString,jsxString:a}},l.convertMarkdownToJSX=c;const v=e=>{try{const t=(0,u.renderToStaticMarkup)(d.default.createElement(m.default,{children:e}));return t.replace(/(\n|\r)/g,e=>e+"\t\t\t")}catch(e){throw console.log("error converting markdown to jsx: "+e),new e}},x=(e,t,r)=>{try{const{data:o,content:a}=(0,w.default)(e);return{frontMatterJsxString:F(o,t,r),markdownString:a}}catch(e){throw console.log("failed to extract front matter: "+e),new e}},F=(e,t,r)=>{if(Object.keys(e).length<1)return"";const o="set"+t.replace(/^\w/,e=>e.toUpperCase()),a=t.replace(/^\w/,e=>e.toLowerCase());let n="";for(const t in e){const r=e[t];n+=`\t\t${t} = ${(0,p.stringify)(r)}, \n`}return`\n\tconst [${a}, ${o}] = useContext('${r}')\n\n\t${o}({\n\t\t...${a},\n`+n+"\n\t})\n"},h=(e,t,r)=>`export const ${e.replace(/^\w/,e=>e.toUpperCase())} = () => { \n ${r}\n    return (\n        <div className='${e.replace(/^\w/,e=>e.toLowerCase())}'>\n            ${t}\n        </div>\n    )\n}`;var M={};Object.defineProperty(M,"__esModule",{value:!0});var S=(k=void 0,M.getMdFilesFromFolder=k);M.writeJsxFiles=S;var y=t,$=e;var k=async e=>{let t=[];try{const r=await y.promises.readdir(e);if(r.length<1)return console.log(`Shuji: No .md files found in folder '${e}'`),t;console.log(`Shuji: Processing ${r.length} files...`),t=await r.reduce(async(t,r)=>{const o=await t;if(".md"!=(0,$.extname)(r))return o;const a=await y.promises.readFile(`${e}/${r}`);return o.push({fileName:(0,$.basename)(r,".md"),data:a.toString()}),o},Promise.resolve([]))}catch(t){console.log(`Shuji: error retrieving files from '${e}': ${t}`)}return t};M.getMdFilesFromFolder=k;S=async(e,t,r)=>{try{r&&await y.promises.rmdir(e),await y.promises.mkdir(e,{recursive:!0}),await Promise.all(t.map(async t=>{await y.promises.writeFile(`${e}/${t.fileName}.jsx`,t.data,"utf8")}))}catch(e){console.log("Shuji: error writing markdown files: "+e)}},M.writeJsxFiles=S;const j={inputFolderPath:"markdown",outputFolderPath:"jsxMarkdown",reactContextName:"ShujiContext",reactContextVarName:"shuji",deleteExistingOutputFolder:!1};var J=j;exports.defaultOptions=J;s=async e=>{try{const t={...j,...e},r=await(0,M.getMdFilesFromFolder)(t.inputFolderPath),o=await(0,l.convertMarkdownFilesToJSXFiles)(r,t.reactContextVarName,t.reactContextName);return await(0,M.writeJsxFiles)(t.outputFolderPath,o,t.deleteExistingOutputFolder),0}catch(e){return 1}},exports.compileMarkdown=s;
//# sourceMappingURL=index.js.map
