var e=require("path"),t=require("fs"),r=require("json5"),a=require("gray-matter"),n=require("react-markdown"),o=require("react-dom/server"),s=require("react");Object.defineProperty(exports,"__esModule",{value:!0});var i=(N=void 0,C=exports.defaultOptions=N,exports.transformMarkdownString=C);exports.transformMarkdownFiles=i;var c={};Object.defineProperty(c,"__esModule",{value:!0});var l=(v=void 0,c.convertMarkdownFilesToJSXFiles=v);c.convertMarkdownToJSX=l;var d=f(s),u=o,m=f(n),w=f(a),p=r;function f(e){return e&&e.__esModule?e:{default:e}}var v=async(e,t,r)=>await Promise.all(e.map(async e=>{const a=x(e.data,t,r),n=g(a.markdownString),o=F(e.fileName,n,a.frontMatterJsxString);return{fileName:e.fileName,data:o}}));c.convertMarkdownFilesToJSXFiles=v;l=async(e,t,r,a)=>{const n=x(e,r,a),o=g(n.markdownString);return F(t,o,n.frontMatterJsxString)},c.convertMarkdownToJSX=l;const g=e=>{try{const t=(0,u.renderToStaticMarkup)(d.default.createElement(m.default,{children:e}));return t.replace(/(\n|\r)/g,e=>e+"\t\t\t")}catch(e){throw console.log("error converting markdown to jsx: "+e),new e}},x=(e,t,r)=>{try{const{data:a,content:n}=(0,w.default)(e);return{frontMatterJsxString:h(a,t,r),markdownString:n}}catch(e){throw console.log("failed to extract front matter: "+e),new e}},h=(e,t,r)=>{if(Object.keys(e).length<1)return"";const a="set"+t.replace(/^\w/,e=>e.toUpperCase()),n=t.replace(/^\w/,e=>e.toLowerCase());let o="";for(const t in e){const r=e[t];o+=`\t\t${t} = ${(0,p.stringify)(r)}, \n`}return`\n\tconst [${n}, ${a}] = useContext('${r}')\n\n\t${a}({\n\t\t...${n},\n`+o+"\n\t})\n"},F=(e,t,r)=>`export const ${e.replace(/^\w/,e=>e.toUpperCase())} = () => { \n ${r}\n    return (\n        <div className='${e.replace(/^\w/,e=>e.toLowerCase())}'>\n            ${t}\n        </div>\n    )\n}`;var y={};Object.defineProperty(y,"__esModule",{value:!0});var M=($=void 0,y.getMdFilesFromFolder=$);y.writeJsxFiles=M;var k=t,S=e;var $=async e=>{let t=[];try{const r=(await k.promises.lstat(e)).isDirectory(),a=r?await k.promises.readdir(e):[(0,S.basename)(e)];if(a.length<1)return console.log(`Shuji: No .md file(s) found in '${e}'`),t;console.log(`Shuji: Processing ${a.length} file(s)...`),t=await a.reduce(async(t,a)=>{const n=await t;if(".md"!=(0,S.extname)(a))return n;const o=r?`${e}/${a}`:e,s=await k.promises.readFile(o);return n.push({fileName:(0,S.basename)(a,".md"),data:s.toString()}),n},Promise.resolve([]))}catch(t){console.log(`Shuji: error retrieving file(s) from '${e}': ${t}`)}return t};y.getMdFilesFromFolder=$;M=async(e,t,r)=>{try{r&&await k.promises.rmdir(e),await k.promises.mkdir(e,{recursive:!0}),await Promise.all(t.map(async t=>{await k.promises.writeFile(`${e}/${t.fileName}.jsx`,t.data,"utf8")}))}catch(e){console.log("Shuji: error writing markdown files: "+e)}},y.writeJsxFiles=M;const j={inputPath:"markdown",outputPath:"jsxMarkdown",reactContextName:"ShujiContext",reactContextVarName:"shuji",deleteExistingOutputFolder:!1};var N=j;exports.defaultOptions=N;var C=async(e,t,r)=>{try{const a={...j,...r};return await(0,c.convertMarkdownToJSX)(e,t,a.reactContextVarName,a.reactContextName)}catch(e){return""}};exports.transformMarkdownString=C;i=async e=>{try{const t={...j,...e},r=await(0,y.getMdFilesFromFolder)(t.inputPath),a=await(0,c.convertMarkdownFilesToJSXFiles)(r,t.reactContextVarName,t.reactContextName);return await(0,y.writeJsxFiles)(t.outputPath,a,t.deleteExistingOutputFolder),0}catch(e){return 1}},exports.transformMarkdownFiles=i;
//# sourceMappingURL=index.js.map
