var e=require("react"),{renderToStaticMarkup:t}=require("react-dom/server"),r=require("react-markdown"),a=require("gray-matter"),{stringify:o}=require("json5"),n=require("chalk"),{promises:i}=require("fs"),{basename:s,extname:l}=require("path");Object.defineProperty(module.exports,"__esModule",{value:!0}),module.exports.transformMarkdownFiles=module.exports.transformMarkdownString=module.exports.defaultOptions=void 0;var c={};Object.defineProperty(c,"__esModule",{value:!0}),c.convertMarkdownToJSX=c.convertMarkdownFilesToJSXFiles=void 0;var u=x(e),d=x(r),f=x(a),m={};Object.defineProperty(m,"__esModule",{value:!0}),m.logger=function(){const e=g.default.hex("#6C63A2");return{debug:t=>{if(!p)return;const r=g.default.hex("#58a6ff");console.log(e("Shuji: ")+r(t))},info:t=>{const r=g.default.hex("#58a6ff");console.log(e("Shuji: ")+r(t))},warn:t=>{const r=g.default.hex("#FFA500");console.log(e("Shuji: ")+r(t))},error:(t,r)=>{const a=g.default.hex("#ff7b72"),o=r?t+`\n actual error: ${r.message} \n ${r.stack}`:t;console.log(e("Shuji: ")+a(o))}}},m.setIsDebugMode=function(e){p=!0===e};var w,g=(w=n)&&w.__esModule?w:{default:w};let p=!1;function x(e){return e&&e.__esModule?e:{default:e}}c.convertMarkdownFilesToJSXFiles=async(e,t,r)=>await Promise.all(e.map((async e=>{const a=F(e.data,t,r),o=h(a.markdownString),n=v(e.fileName,o,a.frontMatterJsxString);return{fileName:e.fileName,data:n}})));c.convertMarkdownToJSX=async(e,t,r,a)=>{const o=F(e,r,a),n=h(o.markdownString);return v(t,n,o.frontMatterJsxString)};const h=e=>{try{const r=t(u.default.createElement(d.default,{children:e}));return r.replace(/(\n|\r)/g,(e=>e+"\t\t\t"))}catch(e){throw m.logger().error(`error converting markdown to jsx: ${e}`),new e}},F=(e,t,r)=>{try{const{data:a,content:o}=f.default(e);return{frontMatterJsxString:M(a,t,r),markdownString:o}}catch(e){throw m.logger().error(`failed to extract front matter: ${e}`),new e}},M=(e,t,r)=>{if(Object.keys(e).length<1)return"";const a="set"+t.replace(/^\w/,(e=>e.toUpperCase())),n=t.replace(/^\w/,(e=>e.toLowerCase()));let i="";for(const t in e){const r=e[t];i+=`\t\t${t} = ${o(r)}, \n`}return`\n\tconst [${n}, ${a}] = useContext('${r}')\n\n\t${a}({\n\t\t...${n},\n${i}\n\t})\n`},v=(e,t,r)=>`export const ${e.replace(/^\w/,(e=>e.toUpperCase()))} = () => { \n ${r}\n    return (\n        <div className='${e.replace(/^\w/,(e=>e.toLowerCase()))}'>\n            ${t}\n        </div>\n    )\n}`;var $={};Object.defineProperty($,"__esModule",{value:!0}),$.writeJsxFiles=$.getMdFilesFromFolder=void 0;$.getMdFilesFromFolder=async e=>{let t=[];try{const r=(await i.lstat(e)).isDirectory(),a=r?await i.readdir(e):[s(e)];if(a.length<1)return m.logger().warn(`No .md file(s) found in '${e}'`),t;m.logger().info(`Processing ${a.length} file(s)...`),t=await a.reduce((async(t,a)=>{const o=await t;if(".md"!=l(a))return o;const n=r?`${e}/${a}`:e,c=await i.readFile(n);return o.push({fileName:s(a,".md"),data:c.toString()}),o}),Promise.resolve([]))}catch(t){m.logger().warn(`No files found in inputPath: '${e}'`)}return t};$.writeJsxFiles=async(e,t,r)=>{try{if(t.length<=0)return;r&&await i.rmdir(e),await i.mkdir(e,{recursive:!0}),await Promise.all(t.map((async t=>{await i.writeFile(`${e}/${t.fileName}.jsx`,t.data,"utf8")})))}catch(e){m.logger().error(`error writing markdown files: ${e}`)}};const k={inputPath:"markdown",outputPath:"jsxMarkdown",reactContextName:"ShujiContext",reactContextVarName:"shuji",deleteExistingOutputFolder:!1};module.exports.defaultOptions=k;module.exports.transformMarkdownString=async(e,t,r)=>{try{const a={...k,...r};return await c.convertMarkdownToJSX(e,t,a.reactContextVarName,a.reactContextName)}catch(e){return""}};module.exports.transformMarkdownFiles=async e=>{try{const t={...k,...e},r=await $.getMdFilesFromFolder(t.inputPath),a=await c.convertMarkdownFilesToJSXFiles(r,t.reactContextVarName,t.reactContextName);return await $.writeJsxFiles(t.outputPath,a,t.deleteExistingOutputFolder),0}catch(e){return 1}};
//# sourceMappingURL=index.js.map
