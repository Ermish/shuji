var{PerformanceEntry:e,PerformanceObserver:t,performance:r}=require("perf_hooks"),n=require("react"),{renderToStaticMarkup:a}=require("react-dom/server"),o=require("react-markdown"),i=require("gray-matter"),{stringify:s}=require("json5"),l=require("chalk"),{promises:c}=require("fs"),{extname:d,basename:u}=require("path");Object.defineProperty(module.exports,"__esModule",{value:!0}),module.exports.transformMarkdownFiles=module.exports.transformMarkdownString=module.exports.defaultOptions=void 0;var m={};Object.defineProperty(m,"__esModule",{value:!0}),m.convertMarkdownToJSX=m.convertMarkdownFilesToJSXFiles=void 0;var f=k(n),g=k(o),w=k(i),h={};Object.defineProperty(h,"__esModule",{value:!0}),h.logger=function(){const e=M.default.hex("#6C63A2");return{debug:t=>{if($>1)return;const r=M.default.hex("#58a6ff");console.log(e("Shuji: ")+r(t))},info:t=>{if($>2)return;const r=M.default.hex("#58a6ff");console.log(e("Shuji: ")+r(t))},warn:t=>{if($>2)return;const r=M.default.hex("#FFA500");console.log(e("Shuji: ")+r(t))},error:(t,r)=>{if($>2)return;const n=M.default.hex("#ff7b72"),a=r?t+`\n actual error: ${r.message} \n ${r.stack}`:t;console.log(e("Shuji: ")+n(a))}}},h.setLogLevel=function(e){$=e};var p,M=(p=l)&&p.__esModule?p:{default:p};let $=2;function k(e){return e&&e.__esModule?e:{default:e}}m.convertMarkdownFilesToJSXFiles=async(e,t,r,n)=>await Promise.all(e.map((async e=>{const a=x(e.data,t,r,n),o=v(a.markdownString),i=F(a.componentNameFromFrontMatter??e.fileName,o,t,a.frontMatterJsxString,n);return{fileName:e.fileName,data:i}})));m.convertMarkdownToJSX=async(e,t,r,n,a)=>{const o=x(e,r,n,a),i=v(o.markdownString);return F(t,i,r,o.frontMatterJsxString,a)};const v=e=>{try{const t=a(f.default.createElement(g.default,{children:e}));return t.replace(/(\n|\r)/g,(e=>e+"\t\t\t"))}catch(e){throw h.logger().error(`error converting markdown to jsx: ${e}`),new e}},x=(e,t,r,n)=>{try{const{data:a,content:o}=w.default(e),i=y(a,t,r,n);return{frontMatterJsxString:i,markdownString:o,componentNameFromFrontMatter:a["react-component-name"]}}catch(e){throw h.logger().error(`failed to extract front matter: ${e}`),new e}},y=(e,t,r,n)=>Object.keys(e).length<1?"":"reacthead"==t?S(e,r,n):"reacthelmet"==t?j(e):"",F=(e,t,r,n,a)=>{const o=e.replace(/^\w/,(e=>e.toUpperCase()));return(n?"reacthelmet"==r?"import { Helmet } from 'react-helmet'\n\n":`import { ${a} } from 'reactHead'\n\n`:"")+`const ${o} = () => { \n  ${"reacthelmet"==r?"":n}\n    return (\n        <div className='${e.replace(/^\w/,(e=>e.toLowerCase()))}'>\n        ${n&&"none"!=r?`${n}\n\t\t`:""}\t${t}\n        </div>\n    )\n}\n    \nexport default ${o}`},j=e=>{if(!e)return"";let t="";for(const r in e){const n=e[r];let a=s(n).replace(/]|[|'[]/g,"");switch(r){case"title":t+=`\n\t\t\t\t<title>${a}</title>`;break;case"description":t+=`\n\t\t\t\t<meta name="description" content="${a}" />`;break;case"author":t+=`\n\t\t\t\t<meta name="author" content="${a}" />`;break;case"keywords":t+=`\n\t\t\t\t<meta name="keywords" content="${a}" />`;break;case"react-component-name":break;default:t+=`\n\t\t\t\t<meta name="${r}" content="${a}" />`}}return`\t<Helmet>\t\t${t}\n\t\t\t</Helmet>`},S=(e,t,r)=>{if(!e)return"";const n=t.replace(/[^\w]/g,""),a="set"+n.replace(/^\w/,(e=>e.toUpperCase())),o=n.replace(/^\w/,(e=>e.toLowerCase()));let i="";for(const t in e){const r=e[t];let n=s(r);const a=t.replace(/[^\w]/g,"");"reactcomponentname"!==a.toLowerCase()&&(i+=`\t\t${a} = ${n}, \n`)}return`\n\tconst [${o}, ${a}] = useContext('${r}')\n\n\t${a}({\n\t\t...${o},\n${i}\t})`};var b={};Object.defineProperty(b,"__esModule",{value:!0}),b.writeJsxFiles=b.getMdFilesFromFolder=void 0;b.getMdFilesFromFolder=async e=>{let t=[];try{const r=(await c.lstat(e)).isDirectory(),n=r?await c.readdir(e):[u(e)];if(n.length<1)return h.logger().warn(`No .md files found in '${e}'`),t;h.logger().info(`Processing ${n.length} file${n.length>1?"s":""} from "${e}"...`),t=await n.reduce((async(t,n)=>{const a=await t;if(".md"!=d(n))return a;const o=r?`${e}/${n}`:e,i=await c.readFile(o);return a.push({fileName:u(n,".md"),data:i.toString()}),a}),Promise.resolve([]))}catch(t){h.logger().warn(`No .md files found in inputPath: '${e}'`)}return t};b.writeJsxFiles=async(e,t,r)=>{try{if(t.length<=0)return;r&&await c.rmdir(e),h.logger().info(`Generating ${t.length} file${t.length>1?"s":""} in "${e}"...`),await c.mkdir(e,{recursive:!0}),await Promise.all(t.map((async t=>{await c.writeFile(`${e}/${t.fileName}.jsx`,t.data,"utf8")})))}catch(e){h.logger().error(`error writing markdown files: ${e}`)}};var C=t,N=r;const P={inputPath:"markdown",outputPath:"jsxMarkdown",frontMatterMode:"reacthelmet",reactHeadContextName:"ReactHeadContext",reactHeadContextVarName:"reactHead",deleteExistingOutputFolder:!1};module.exports.defaultOptions=P;new C((e=>{e.getEntries().forEach((e=>{const t=parseInt(e.duration);"shuji"!=e.name?h.logger().debug(`${e.name} finished in ${t}ms.`):h.logger().info(`Done in ${t}ms.`)}))})).observe({entryTypes:["measure"],buffer:!0});module.exports.transformMarkdownString=async(e,t,r)=>{try{var n;N.mark("start-shuji");const a={...P,...r,frontMatterMode:(null==r||null===(n=r.frontMatterMode)||void 0===n?void 0:n.toLowerCase())??P.frontMatterMode};return await m.convertMarkdownToJSX(e,t,a.frontMatterMode,a.reactHeadContextVarName,a.reactHeadContextName)}catch(e){return""}finally{N.mark("end-shuji"),N.measure("shuji","start-shuji","end-shuji")}};module.exports.transformMarkdownFiles=async e=>{try{var t;N.mark("start-shuji");const r={...P,...e,frontMatterMode:(null==e||null===(t=e.frontMatterMode)||void 0===t?void 0:t.toLowerCase())??P.frontMatterMode},n=await b.getMdFilesFromFolder(r.inputPath),a=await m.convertMarkdownFilesToJSXFiles(n,r.frontMatterMode,r.reactHeadContextVarName,r.reactHeadContextName);return await b.writeJsxFiles(r.outputPath,a,r.deleteExistingOutputFolder),0}catch(e){return 1}finally{N.mark("end-shuji"),N.measure("shuji","start-shuji","end-shuji")}};
//# sourceMappingURL=index.js.map
