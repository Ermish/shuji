var{PerformanceEntry:e,performance:r,PerformanceObserver:t}=require("perf_hooks"),n=require("react"),{renderToStaticMarkup:a}=require("react-dom/server"),o=require("react-markdown"),i=require("gray-matter"),{stringify:s}=require("json5"),l=require("chalk"),{promises:u}=require("fs"),{basename:c,extname:d}=require("path");Object.defineProperty(module.exports,"__esModule",{value:!0}),module.exports.transformMarkdownFiles=module.exports.transformMarkdownString=module.exports.defaultOptions=void 0;var f={};Object.defineProperty(f,"__esModule",{value:!0}),f.convertMarkdownToJSX=f.convertMarkdownFilesToJSXFiles=void 0;var m=k(n),g=k(o),w=k(i),h={};Object.defineProperty(h,"__esModule",{value:!0}),h.logger=function(){const e=x.default.hex("#6C63A2");return{debug:r=>{if($>1)return;const t=x.default.hex("#58a6ff");console.log(e("Shuji: ")+t(r))},info:r=>{if($>2)return;const t=x.default.hex("#58a6ff");console.log(e("Shuji: ")+t(r))},warn:r=>{if($>2)return;const t=x.default.hex("#FFA500");console.log(e("Shuji: ")+t(r))},error:(r,t)=>{if($>2)return;const n=x.default.hex("#ff7b72"),a=t?r+`\n actual error: ${t.message} \n ${t.stack}`:r;console.log(e("Shuji: ")+n(a))}}},h.setLogLevel=function(e){$=e};var p,x=(p=l)&&p.__esModule?p:{default:p};let $=2;function k(e){return e&&e.__esModule?e:{default:e}}f.convertMarkdownFilesToJSXFiles=async(e,r,t)=>await Promise.all(e.map((async e=>{const n=y(e.data,r,t),a=v(n.markdownString),o=F(e.fileName,a,n.frontMatterJsxString);return{fileName:e.fileName,data:o}})));f.convertMarkdownToJSX=async(e,r,t,n)=>{const a=y(e,t,n),o=v(a.markdownString);return F(r,o,a.frontMatterJsxString)};const v=e=>{try{const r=a(m.default.createElement(g.default,{children:e}));return r.replace(/(\n|\r)/g,(e=>e+"\t\t\t"))}catch(e){throw h.logger().error(`error converting markdown to jsx: ${e}`),new e}},y=(e,r,t)=>{try{const{data:n,content:a}=w.default(e);return{frontMatterJsxString:j(n,r,t),markdownString:a}}catch(e){throw h.logger().error(`failed to extract front matter: ${e}`),new e}},j=(e,r,t)=>{if(Object.keys(e).length<1)return"";const n="set"+r.replace(/^\w/,(e=>e.toUpperCase())),a=r.replace(/^\w/,(e=>e.toLowerCase()));let o="";for(const r in e){const t=e[r];o+=`\t\t${r} = ${s(t)}, \n`}return`\n\tconst [${a}, ${n}] = useContext('${t}')\n\n\t${n}({\n\t\t...${a},\n${o}\n\t})\n`},F=(e,r,t)=>`export const ${e.replace(/^\w/,(e=>e.toUpperCase()))} = () => { \n ${t}\n    return (\n        <div className='${e.replace(/^\w/,(e=>e.toLowerCase()))}'>\n            ${r}\n        </div>\n    )\n}`;var M={};Object.defineProperty(M,"__esModule",{value:!0}),M.writeJsxFiles=M.getMdFilesFromFolder=void 0;M.getMdFilesFromFolder=async e=>{let r=[];try{const t=(await u.lstat(e)).isDirectory(),n=t?await u.readdir(e):[c(e)];if(n.length<1)return h.logger().warn(`No .md files found in '${e}'`),r;h.logger().info(`Processing ${n.length} file${n.length>1?"s":""} from "${e}"...`),r=await n.reduce((async(r,n)=>{const a=await r;if(".md"!=d(n))return a;const o=t?`${e}/${n}`:e,i=await u.readFile(o);return a.push({fileName:c(n,".md"),data:i.toString()}),a}),Promise.resolve([]))}catch(r){h.logger().warn(`No .md files found in inputPath: '${e}'`)}return r};M.writeJsxFiles=async(e,r,t)=>{try{if(r.length<=0)return;t&&await u.rmdir(e),h.logger().info(`Generating ${r.length} file${r.length>1?"s":""} in "${e}"...`),await u.mkdir(e,{recursive:!0}),await Promise.all(r.map((async r=>{await u.writeFile(`${e}/${r.fileName}.jsx`,r.data,"utf8")})))}catch(e){h.logger().error(`error writing markdown files: ${e}`)}};var S=r,P=t;const N={inputPath:"markdown",outputPath:"jsxMarkdown",reactContextName:"ShujiContext",reactContextVarName:"shuji",deleteExistingOutputFolder:!1};module.exports.defaultOptions=N;new P((e=>{e.getEntries().forEach((e=>{const r=parseInt(e.duration);"shuji"!=e.name?h.logger().debug(`${e.name} finished in ${r}ms.`):h.logger().info(`Done in ${r}ms.`)}))})).observe({entryTypes:["measure"],buffer:!0});module.exports.transformMarkdownString=async(e,r,t)=>{try{S.mark("start-shuji");const n={...N,...t};return await f.convertMarkdownToJSX(e,r,n.reactContextVarName,n.reactContextName)}catch(e){return""}finally{S.mark("end-shuji"),S.measure("shuji","start-shuji","end-shuji")}};module.exports.transformMarkdownFiles=async e=>{try{S.mark("start-shuji");const r={...N,...e},t=await M.getMdFilesFromFolder(r.inputPath),n=await f.convertMarkdownFilesToJSXFiles(t,r.reactContextVarName,r.reactContextName);return await M.writeJsxFiles(r.outputPath,n,r.deleteExistingOutputFolder),0}catch(e){return 1}finally{S.mark("end-shuji"),S.measure("shuji","start-shuji","end-shuji")}};
//# sourceMappingURL=index.js.map
