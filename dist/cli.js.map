{"mappings":"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","sources":["src/cli.ts","package.json","src/converter.tsx","src/logger.ts","src/fileProcessor.tsx","src/index.ts"],"sourcesContent":["#! /usr/bin/env node\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cli = void 0;\n\nvar _yargs = _interopRequireDefault(require(\"yargs\"));\n\nvar _fs = require(\"fs\");\n\nvar _package = require(\"../package.json\");\n\nvar _index = require(\"./index\");\n\nvar _logger = require(\"./logger\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst handleArgs = cliArgs => {\n  const yargsObject = (0, _yargs.default)(cliArgs).scriptName('shuji').wrap(_yargs.default.terminalWidth()) //Show help\n  .help('help').alias('help', 'h').showHelpOnFail(false, 'whoops, something went wrong! try running with --help').epilogue('for more information, check out the documentation at https://github.com/ermish/shuji') //Show version option\n  .version('v', 'shuji version', _package.version ?? 'unable to verify. check your package.json').alias('version', 'v') //Allow reading options from a file\n  .config('config', 'path to a Shuji \".shujirc.json\" or \".shujirc\" config file ', function (configPath) {\n    return JSON.parse((0, _fs.readFileSync)(configPath, 'utf-8'));\n  }).alias('c', 'config').example([['$0 -c=\"./.shujirc\"', 'importing config file.'], ['$0 --inputPath=./src/markdown/ --outputPath=./src/jsxPages/ --config=./.shujirc.json', 'Full example']]) //Debug Mode\n  .option('logLevel', {\n    alias: 'l',\n    choices: [1, 2, 3],\n    describe: 'Set the log level. 1=debug mode, 2=default, 3= no logs',\n    default: 2,\n    type: 'number'\n  }) //Shuji Options\n  .group(['inputPath', 'outputPath', 'reactContextName', 'reactContextVarName', 'deleteExistingOutputFolder'], 'Config Parameters:').option('inputPath', {\n    alias: 'i',\n    describe: 'Target folder or file with .md files for Shuji to parse',\n    type: 'string'\n  }).option('outputPath', {\n    alias: 'o',\n    describe: 'Output destination folder to write the compiled .jsx files',\n    type: 'string'\n  }).option('useReactHelmet', {\n    alias: 'rh',\n    describe: 'Toggle output style of front matter. true uses react helmet syntax. false will set react context values you have more control over. This is referred to as \"reactHead\"',\n    type: 'boolean'\n  }).option('reactHeadContextName', {\n    alias: 'rc',\n    describe: \"The react context name in which any detected front-matter will be set through useContext('${reactContextName}')\",\n    type: 'string'\n  }).option('reactHeadContextVarName', {\n    alias: 'rcv',\n    describe: \"The name of the react context object and set method assigned from useContext('${reactContextName}'). ex. const [${yourVar}, set${YourVar}]\",\n    type: 'string'\n  }).option('deleteExistingOutputFolder', {\n    alias: 'del',\n    describe: 'Delete existing content in the output folder (outputFolderPath) before writing compiled files',\n    type: 'boolean'\n  }).argv; //Enable debugger logging ASAP\n\n  (0, _logger.setLogLevel)(yargsObject['logLevel']);\n  (0, _logger.logger)().debug(`cli args: ${JSON.stringify(yargsObject)}`);\n  return yargsObject;\n};\n\nconst convertYargsToShujiOptions = yargs => {\n  const mergedObject = {};\n  Object.keys(_index.defaultOptions).forEach(key => {\n    if (yargs.hasOwnProperty(key)) {\n      mergedObject[key] = yargs[key];\n    }\n  });\n  (0, _logger.logger)().debug(`parsed user options: ${JSON.stringify(mergedObject)}`);\n  return mergedObject;\n};\n\nconst cli = async args => {\n  try {\n    const yargs = handleArgs(args);\n    const userOptions = convertYargsToShujiOptions(yargs);\n    await (0, _index.transformMarkdownFiles)(userOptions);\n  } catch (err) {\n    (0, _logger.logger)().error(`An unknown error occurred! Try using a markdown validator to ensure your mardown files are valid`, err);\n  }\n};\n\nexports.cli = cli;\ncli(process.argv);","\"use strict\";\n\nmodule.exports = JSON.parse(\"{\\\"name\\\":\\\"@ermish/shuji\\\",\\\"version\\\":\\\"1.2.1\\\",\\\"author\\\":\\\"ermish <philipermish@gmail.com>\\\",\\\"license\\\":\\\"MIT\\\",\\\"description\\\":\\\"A Markdown to React JSX converter\\\",\\\"keywords\\\":[\\\"react\\\",\\\"markdown\\\",\\\"template\\\",\\\"remark\\\",\\\"jsx\\\",\\\"front matter\\\",\\\"converter\\\"],\\\"engines\\\":{\\\"node\\\":\\\">14\\\"},\\\"repository\\\":\\\"https://github.com/Ermish/shuji\\\",\\\"bin\\\":{\\\"shuji\\\":\\\"./dist/cli.js\\\"},\\\"collaborators\\\":[\\\"ermish <philipermish@gmail.com>\\\"],\\\"files\\\":[\\\"dist/\\\",\\\"package.json\\\",\\\"license\\\",\\\"README.md\\\"],\\\"publishConfig\\\":{\\\"access\\\":\\\"public\\\"},\\\"scripts\\\":{\\\"build\\\":\\\"yarn && parcel build ./src/index.ts ./src/cli.ts --dist-dir dist\\\",\\\"start\\\":\\\"node ./dist/cli.js -i='./src/samples' --useReactHelmet=false\\\",\\\"lint\\\":\\\"eslint ./src/**.js\\\",\\\"test\\\":\\\"jest --verbose\\\",\\\"cli\\\":\\\"\\\"},\\\"dependencies\\\":{\\\"chalk\\\":\\\"^4.1.1\\\",\\\"fs-extra\\\":\\\"^10.0.0\\\",\\\"gray-matter\\\":\\\"^4.0.2\\\",\\\"json5\\\":\\\"^2.2.0\\\",\\\"react\\\":\\\"^17.0.2\\\",\\\"react-dom\\\":\\\"^17.0.2\\\",\\\"react-markdown\\\":\\\"^6.0.2\\\",\\\"yargs\\\":\\\"^17.0.1\\\"},\\\"devDependencies\\\":{\\\"@babel/core\\\":\\\"^7.14.0\\\",\\\"@babel/preset-env\\\":\\\"^7.12.11\\\",\\\"@babel/preset-react\\\":\\\"^7.13.13\\\",\\\"@babel/preset-typescript\\\":\\\"^7.13.0\\\",\\\"@tsconfig/node16\\\":\\\"^1.0.1\\\",\\\"@types/fs-extra\\\":\\\"^9.0.11\\\",\\\"@types/jest\\\":\\\"^26.0.20\\\",\\\"@types/json5\\\":\\\"^2.2.0\\\",\\\"@types/klaw\\\":\\\"^3.0.1\\\",\\\"@types/react\\\":\\\"^17.0.0\\\",\\\"@types/react-dom\\\":\\\"^17.0.0\\\",\\\"babel-jest\\\":\\\"^26.6.3\\\",\\\"eslint\\\":\\\"^7.27.0\\\",\\\"eslint-config-prettier\\\":\\\"^7.1.0\\\",\\\"jest\\\":\\\"^26.6.3\\\",\\\"parcel\\\":\\\"^2.0.0-beta.3.1\\\",\\\"sass\\\":\\\"^1.32.0\\\",\\\"stylelint\\\":\\\"^13.8.0\\\",\\\"stylelint-config-recommended\\\":\\\"^3.0.0\\\",\\\"stylelint-order\\\":\\\"^4.1.0\\\",\\\"stylelint-scss\\\":\\\"^3.18.0\\\",\\\"typescript\\\":\\\"^4.2.4\\\"}}\");","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertMarkdownToJSX = exports.convertMarkdownFilesToJSXFiles = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _server = require(\"react-dom/server\");\n\nvar _reactMarkdown = _interopRequireDefault(require(\"react-markdown\"));\n\nvar _grayMatter = _interopRequireDefault(require(\"gray-matter\"));\n\nvar _json = require(\"json5\");\n\nvar _logger = require(\"./logger\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Converts Markdown files to JSX files, including any html in the markdown.\n * Also, front-matter will be extracted in js variables in the react component.\n * @param {string[]} `markdownFiles` Markdown strings to convert that may also include front-matter and html.\n * @param {string} `outputFolderPath` Front matter to stringify.\n * @param {string} `reactContextName` name of react context object to assign front-matter variables to.\n * @return {Promise<JsxFiles>} Files containing jsx\n */\nconst convertMarkdownFilesToJSXFiles = async (markdownFiles, useReactHelmet, reactContextVarName, reactContextName) => {\n  const files = await Promise.all(markdownFiles.map(async file => {\n    const frontMatterAndMarkdown = extractFrontMatter(file.data, useReactHelmet, reactContextVarName, reactContextName);\n    const jsxString = convertMarkdownAndHtmlToJsx(frontMatterAndMarkdown.markdownString);\n    const reactComponentString = createJsxComponentString(file.fileName, jsxString, useReactHelmet, frontMatterAndMarkdown.frontMatterJsxString, reactContextName);\n    return {\n      fileName: file.fileName,\n      data: reactComponentString\n    };\n  }));\n  return files;\n};\n/**\n * Converts Markdown to JSX, including any html in the markdown.\n * Also, front-matter will be extracted in js variables in the react component.\n * @param {string} `markdownString` Markdown string to convert to a react component that may also include front-matter and html.\n * @param {componentName} `componentName` Name of new react component.\n * @param {string} `reactContextVarName` name of react context variable name to assign front-matter variables to. like [shuji, setShuji] = useContext(...)\n * @param {string} `reactContextName` name of react context object to assign front-matter variables to.\n * @return {Promise<string>} Front matter and Markdown JSX strings\n */\n\n\nexports.convertMarkdownFilesToJSXFiles = convertMarkdownFilesToJSXFiles;\n\nconst convertMarkdownToJSX = async (markdownString, componentName, useReactHelmet, reactContextVarName, reactContextName) => {\n  const frontMatterAndMarkdown = extractFrontMatter(markdownString, useReactHelmet, reactContextVarName, reactContextName);\n  const jsxString = convertMarkdownAndHtmlToJsx(frontMatterAndMarkdown.markdownString);\n  const reactComponentString = createJsxComponentString(componentName, jsxString, useReactHelmet, frontMatterAndMarkdown.frontMatterJsxString, reactContextName);\n  return reactComponentString;\n};\n\nexports.convertMarkdownToJSX = convertMarkdownToJSX;\n\nconst convertMarkdownAndHtmlToJsx = markdownString => {\n  try {\n    const jsxString = (0, _server.renderToStaticMarkup)( /*#__PURE__*/_react.default.createElement(_reactMarkdown.default, {\n      children: markdownString\n    }));\n    const jsxStringWithTabs = jsxString.replace(/(\\n|\\r)/g, c => c + '\\t\\t\\t');\n    return jsxStringWithTabs;\n  } catch (error) {\n    (0, _logger.logger)().error(`error converting markdown to jsx: ${error}`);\n    throw new error();\n  }\n};\n\nconst extractFrontMatter = (stringWithFrontMatter, useReactHelment, reactContextVarName, reactContextName) => {\n  try {\n    const {\n      data,\n      content\n    } = (0, _grayMatter.default)(stringWithFrontMatter);\n    const frontMatterJsxString = createFrontMatterJSXString(data, useReactHelment, reactContextVarName, reactContextName);\n    return {\n      frontMatterJsxString: frontMatterJsxString,\n      markdownString: content\n    };\n  } catch (error) {\n    (0, _logger.logger)().error(`failed to extract front matter: ${error}`);\n    throw new error();\n  }\n};\n\nconst createFrontMatterJSXString = (propsToAssign, useReactHelment, reactContextVarName, reactContextName) => {\n  if (Object.keys(propsToAssign).length < 1) return '';\n\n  if (useReactHelment == false) {\n    return createReactHeadString(propsToAssign, reactContextVarName, reactContextName);\n  }\n\n  return createReactHelmentElements(propsToAssign);\n};\n\nconst createJsxComponentString = (componentName, reactString, useReactHelmet, frontmatterString, reactContextName) => {\n  const capitalizedMethodName = componentName.replace(/^\\w/, c => c.toUpperCase());\n  const camelCasedComponentName = componentName.replace(/^\\w/, c => c.toLowerCase());\n  let reactComponent = `${frontmatterString ? useReactHelmet ? `import { Helmet } from 'react-helmet'\\n\\n` : `import { ${reactContextName} } from 'reactHead'\\n\\n` : ''}` + `export const ${capitalizedMethodName} = () => { \\n  ${useReactHelmet ? '' : frontmatterString}\n    return (\n        <div className='${camelCasedComponentName}'>\n        ${useReactHelmet ? frontmatterString : ''}\\t${reactString}\n        </div>\n    )\\n}`;\n  return reactComponent;\n};\n\nconst createReactHelmentElements = propsToAssign => {\n  if (!propsToAssign) {\n    return '';\n  }\n\n  let propAssignmentString = '';\n\n  for (const propName in propsToAssign) {\n    const propValue = propsToAssign[propName]; //clean up arrays\n\n    let propValueStringified = (0, _json.stringify)(propValue).replace(/]|[|'[]/g, '');\n\n    switch (propName) {\n      case 'title':\n        propAssignmentString += `\\n\\t\\t\\t\\t<title>${propValueStringified}</title>`;\n        break;\n\n      case 'description':\n        propAssignmentString += `\\n\\t\\t\\t\\t<meta name=\"description\" content=\"${propValueStringified}\" />`;\n        break;\n\n      case 'author':\n        propAssignmentString += `\\n\\t\\t\\t\\t<meta name=\"author\" content=\"${propValueStringified}\" />`;\n        break;\n\n      case 'keywords':\n        propAssignmentString += `\\n\\t\\t\\t\\t<meta name=\"keywords\" content=\"${propValueStringified}\" />`;\n        break;\n\n      default:\n        propAssignmentString += `\\n\\t\\t\\t\\t<meta name=\"${propName}\" content=\"${propValueStringified}\" />`;\n        break;\n    }\n  }\n\n  const reactHelmetString = `\\t<Helmet>` + `\\t\\t${propAssignmentString}` + `\\n\\t\\t\\t</Helmet>`;\n  return reactHelmetString;\n};\n\nconst createReactHeadString = (propsToAssign, reactContextVarName, reactContextName) => {\n  if (!propsToAssign) {\n    return '';\n  } //Example\n  // const [metadata, setMetadata] = useContext('TestContext')\n  // setMetadata({\n  //     ...metadata,\n  //     date = '2021-01-01',\n  //     title = 'node is cool',\n  //     slug = 'node-is-cool',\n  //     description = 'How to node',\n  //     tags = ['node','cool','shuji']\n  // })\n\n\n  const setContextVarName = 'set' + reactContextVarName.replace(/^\\w/, c => c.toUpperCase());\n  const camelCasedVarName = reactContextVarName.replace(/^\\w/, c => c.toLowerCase());\n  let propAssignmentString = '';\n\n  for (const propName in propsToAssign) {\n    const propValue = propsToAssign[propName];\n    let propValueStringified = (0, _json.stringify)(propValue);\n    propAssignmentString += `\\t\\t${propName} = ${propValueStringified}, \\n`;\n  }\n\n  const contextAssignmentString = `\\n\\tconst [${camelCasedVarName}, ${setContextVarName}] = useContext('${reactContextName}')` + `\\n\\n\\t${setContextVarName}({` + `\\n\\t\\t...${camelCasedVarName},` + `\\n${propAssignmentString}` + `\\n\\t})\\n`;\n  return contextAssignmentString;\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logger = logger;\nexports.setLogLevel = setLogLevel;\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//TODO make this a real logger\nfunction logger() {\n  const shujiPurple = _chalk.default.hex('#6C63A2');\n\n  const debug = message => {\n    if (logLevel > 1) return;\n\n    const blue = _chalk.default.hex('#58a6ff');\n\n    console.log(shujiPurple('Shuji: ') + blue(message));\n  };\n\n  const info = message => {\n    if (logLevel > 2) return;\n\n    const blue = _chalk.default.hex('#58a6ff');\n\n    console.log(shujiPurple('Shuji: ') + blue(message));\n  };\n\n  const warn = message => {\n    if (logLevel > 2) return;\n\n    const orange = _chalk.default.hex('#FFA500');\n\n    console.log(shujiPurple('Shuji: ') + orange(message));\n  };\n\n  const error = (message, error) => {\n    if (logLevel > 2) return;\n\n    const red = _chalk.default.hex('#ff7b72');\n\n    const fullErrorMessage = error ? message + `\\n actual error: ${error.message} \\n ${error.stack}` : message;\n    console.log(shujiPurple('Shuji: ') + red(fullErrorMessage));\n  };\n\n  return {\n    debug,\n    info,\n    warn,\n    error\n  };\n} // level 1 = debug\n// level 2 = default\n// level 3 = no logging\n\n\nlet logLevel = 2;\n\nfunction setLogLevel(level) {\n  logLevel = level;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.writeJsxFiles = exports.getMdFilesFromFolder = void 0;\n\nvar _fs = require(\"fs\");\n\nvar _path = require(\"path\");\n\nvar _logger = require(\"./logger\");\n\nconst getMdFilesFromFolder = async path => {\n  let mdFiles = [];\n\n  try {\n    const pathStat = await _fs.promises.lstat(path);\n    const isPathADirectory = pathStat.isDirectory();\n    const fileNamesInDir = isPathADirectory ? await _fs.promises.readdir(path) : [(0, _path.basename)(path)];\n\n    if (fileNamesInDir.length < 1) {\n      (0, _logger.logger)().warn(`No .md files found in '${path}'`);\n      return mdFiles;\n    }\n\n    (0, _logger.logger)().info(`Processing ${fileNamesInDir.length} file${fileNamesInDir.length > 1 ? 's' : ''} from \"${path}\"...`);\n    mdFiles = await fileNamesInDir.reduce(async (validFilesPromise, fileName) => {\n      const validFiles = await validFilesPromise;\n      if ((0, _path.extname)(fileName) != '.md') return validFiles;\n      const filePath = isPathADirectory ? `${path}/${fileName}` : path;\n      const fileData = await _fs.promises.readFile(filePath);\n      validFiles.push({\n        fileName: (0, _path.basename)(fileName, '.md'),\n        data: fileData.toString()\n      });\n      return validFiles;\n    }, Promise.resolve([]));\n  } catch (err) {\n    (0, _logger.logger)().warn(`No .md files found in inputPath: '${path}'`);\n  }\n\n  return mdFiles;\n};\n\nexports.getMdFilesFromFolder = getMdFilesFromFolder;\n\nconst writeJsxFiles = async (folderPath, jsxFiles, deleteExistingOutputFolder) => {\n  try {\n    if (jsxFiles.length <= 0) return;\n    if (deleteExistingOutputFolder) await _fs.promises.rmdir(folderPath);\n    (0, _logger.logger)().info(`Generating ${jsxFiles.length} file${jsxFiles.length > 1 ? 's' : ''} in \"${folderPath}\"...`);\n    await _fs.promises.mkdir(folderPath, {\n      recursive: true\n    });\n    await Promise.all(jsxFiles.map(async jsxFile => {\n      await _fs.promises.writeFile(`${folderPath}/${jsxFile.fileName}.jsx`, jsxFile.data, 'utf8');\n    }));\n  } catch (error) {\n    (0, _logger.logger)().error(`error writing markdown files: ${error}`);\n  }\n};\n\nexports.writeJsxFiles = writeJsxFiles;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformMarkdownFiles = exports.transformMarkdownString = exports.defaultOptions = void 0;\n\nvar _converter = require(\"./converter\");\n\nvar _fileProcessor = require(\"./fileProcessor\");\n\nvar _logger = require(\"./logger\");\n\nconst {\n  performance,\n  PerformanceObserver,\n  PerformanceEntry\n} = require(\"perf_hooks\");\n\nconst defaultOptions = {\n  inputPath: 'markdown',\n  outputPath: 'jsxMarkdown',\n  useReactHelmet: true,\n  reactHeadContextName: 'ReactHeadContext',\n  reactHeadContextVarName: 'reactHead',\n  deleteExistingOutputFolder: false\n}; //TODO: use typescript types\n\nexports.defaultOptions = defaultOptions;\nconst perfObserver = new PerformanceObserver(items => {\n  items.getEntries().forEach(entry => {\n    const trimmedDuration = parseInt(entry.duration);\n\n    if (entry.name == 'shuji') {\n      (0, _logger.logger)().info(`Done in ${trimmedDuration}ms.`);\n      return;\n    }\n\n    (0, _logger.logger)().debug(`${entry.name} finished in ${trimmedDuration}ms.`);\n  });\n});\nperfObserver.observe({\n  entryTypes: [\"measure\"],\n  buffer: true\n});\n/**\n * Transforms a Markdown string to JSX, including any html in the markdown.\n * Also, front-matter will be extracted in js variables in the react component.\n * @param {string} `markdownString` Markdown string to convert to a react component that may also include front-matter and html.\n * @param {componentName} `componentName` Name of new react component.\n * @param {Options} User defined options to override default values.\n * @return {Promise<number>} files\n */\n\nconst transformMarkdownString = async (markdownString, componentName, options) => {\n  try {\n    performance.mark('start-shuji');\n    const userOptions = { ...defaultOptions,\n      ...options\n    };\n    const jsxString = await (0, _converter.convertMarkdownToJSX)(markdownString, componentName, userOptions.useReactHelmet, userOptions.reactHeadContextVarName, userOptions.reactHeadContextName);\n    return jsxString;\n  } catch (error) {\n    return '';\n  } finally {\n    performance.mark('end-shuji');\n    performance.measure('shuji', 'start-shuji', 'end-shuji');\n  }\n};\n/**\n * Transforms Markdown files to JSX files, including any html in the markdown.\n * Also, front-matter will be extracted in js variables in the react component.\n * @param {Options} User defined options to override default values.\n * @return {Promise<number>} files\n */\n\n\nexports.transformMarkdownString = transformMarkdownString;\n\nconst transformMarkdownFiles = async options => {\n  try {\n    performance.mark('start-shuji');\n    const userOptions = { ...defaultOptions,\n      ...options\n    };\n    const mdFiles = await (0, _fileProcessor.getMdFilesFromFolder)(userOptions.inputPath);\n    const jsxStrings = await (0, _converter.convertMarkdownFilesToJSXFiles)(mdFiles, userOptions.useReactHelmet, userOptions.reactHeadContextVarName, userOptions.reactHeadContextName);\n    await (0, _fileProcessor.writeJsxFiles)(userOptions.outputPath, jsxStrings, userOptions.deleteExistingOutputFolder);\n    return 0;\n  } catch (error) {\n    return 1;\n  } finally {\n    performance.mark('end-shuji');\n    performance.measure('shuji', 'start-shuji', 'end-shuji');\n  }\n};\n\nexports.transformMarkdownFiles = transformMarkdownFiles;"],"names":["$a89bc4bb763753d494164da31d05cc60$var$_yargs","$2wN7J$yargs","module","JSON","parse","$ef41a945f0ad9b72d9d658553d0d8690$var$_react","$ef41a945f0ad9b72d9d658553d0d8690$var$_interopRequireDefault","$2wN7J$react","$ef41a945f0ad9b72d9d658553d0d8690$var$_reactMarkdown","$2wN7J$reactmarkdown","$ef41a945f0ad9b72d9d658553d0d8690$var$_grayMatter","$2wN7J$graymatter","shujiPurple","chalk","hex","message","logLevel","blue","console","log","orange","error","red","fullErrorMessage","stack","level","$c08bde6a2c7ebbc4ffc54f57ff3d4fab$var$_chalk","$c08bde6a2c7ebbc4ffc54f57ff3d4fab$var$_interopRequireDefault","$2wN7J$chalk","async","markdownFiles","useReactHelmet","reactContextVarName","reactContextName","Promise","all","map","file","frontMatterAndMarkdown","extractFrontMatter","data","jsxString","convertMarkdownAndHtmlToJsx","markdownString","reactComponentString","createJsxComponentString","fileName","frontMatterJsxString","componentName","$2wN7J$renderToStaticMarkup","default","createElement","children","replace","c","$c08bde6a2c7ebbc4ffc54f57ff3d4fab$exports","logger","stringWithFrontMatter","useReactHelment","content","createFrontMatterJSXString","propsToAssign","Object","keys","length","createReactHeadString","createReactHelmentElements","reactString","frontmatterString","toUpperCase","toLowerCase","propAssignmentString","propName","propValue","propValueStringified","$2wN7J$stringify","setContextVarName","camelCasedVarName","path","mdFiles","isPathADirectory","promises","lstat","isDirectory","fileNamesInDir","readdir","$2wN7J$basename","warn","info","reduce","validFilesPromise","validFiles","$2wN7J$extname","filePath","fileData","readFile","push","toString","resolve","err","folderPath","jsxFiles","deleteExistingOutputFolder","rmdir","mkdir","recursive","jsxFile","writeFile","$2wN7J$performance","$2wN7J$PerformanceObserver","defaultOptions","inputPath","outputPath","reactHeadContextName","reactHeadContextVarName","$7d09df7f6586727d9bda14a00ae6ddb6$require$PerformanceObserver","items","getEntries","forEach","entry","trimmedDuration","parseInt","duration","name","debug","observe","entryTypes","buffer","options","mark","userOptions","$ef41a945f0ad9b72d9d658553d0d8690$exports","convertMarkdownToJSX","measure","$c09e710eec33281839f83e0e295043f3$exports","getMdFilesFromFolder","jsxStrings","convertMarkdownFilesToJSXFiles","writeJsxFiles","cli","args","yargs","mergedObject","key","hasOwnProperty","stringify","convertYargsToShujiOptions","cliArgs","yargsObject","scriptName","wrap","terminalWidth","help","alias","showHelpOnFail","epilogue","version","config","configPath","$2wN7J$readFileSync","example","option","choices","describe","type","group","argv","setLogLevel","handleArgs","$7d09df7f6586727d9bda14a00ae6ddb6$exports","transformMarkdownFiles","process"],"version":3,"file":"cli.js.map","sourceRoot":"../"}