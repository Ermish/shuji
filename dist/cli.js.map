{"mappings":"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","sources":["src/cli.ts","package.json","src/converter.tsx","src/logger.ts","src/fileProcessor.tsx","src/index.ts"],"sourcesContent":["#! /usr/bin/env node\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cli = void 0;\n\nvar _yargs = _interopRequireDefault(require(\"yargs\"));\n\nvar _fs = require(\"fs\");\n\nvar _package = require(\"../package.json\");\n\nvar _index = require(\"./index\");\n\nvar _logger = require(\"./logger\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst handleArgs = cliArgs => {\n  const yargsObject = (0, _yargs.default)(cliArgs).scriptName('shuji').wrap(_yargs.default.terminalWidth()) //Show help\n  .help('help').alias('help', 'h').showHelpOnFail(false, 'whoops, something went wrong! try running with --help').epilogue('for more information, check out the documentation at https://github.com/ermish/shuji') //Show version option\n  .version('v', 'shuji version', _package.version ?? 'unable to verify. check your package.json').alias('version', 'v') //Allow reading options from a file\n  .config('config', 'path to a Shuji \".shujirc.json\" or \".shujirc\" config file ', function (configPath) {\n    return JSON.parse((0, _fs.readFileSync)(configPath, 'utf-8'));\n  }).alias('c', 'config').example([['$0 -c=\"./.shujirc\"', 'importing config file.'], ['$0 --inputPath=./src/markdown/ --outputPath=./src/jsxPages/ --config=./.shujirc.json', 'Full example']]) //Debug Mode\n  .option('logLevel', {\n    alias: 'l',\n    choices: [1, 2, 3],\n    describe: 'Set the log level. 1=debug mode, 2=default, 3= no logs',\n    default: 2,\n    type: 'number'\n  }) //Shuji Options\n  .group(['inputPath', 'outputPath', 'useReactHelmet', 'reactHeadContextName', 'reactHeadContextVarName', 'deleteExistingOutputFolder'], 'Config Parameters:').option('inputPath', {\n    alias: 'i',\n    describe: 'Target folder or file with .md files for Shuji to parse',\n    type: 'string'\n  }).option('outputPath', {\n    alias: 'o',\n    describe: 'Output destination folder to write the compiled .jsx files',\n    type: 'string'\n  }).option('useReactHelmet', {\n    alias: 'rh',\n    describe: 'Toggle output style of front matter. true uses react helmet syntax. false will set react context values you have more control over. This is referred to as \"reactHead\"',\n    type: 'boolean'\n  }).option('reactHeadContextName', {\n    alias: 'rc',\n    describe: \"The react context name in which any detected front-matter will be set through useContext('${reactContextName}')\",\n    type: 'string'\n  }).option('reactHeadContextVarName', {\n    alias: 'rcv',\n    describe: \"The name of the react context object and set method assigned from useContext('${reactContextName}'). ex. const [${yourVar}, set${YourVar}]\",\n    type: 'string'\n  }).option('deleteExistingOutputFolder', {\n    alias: 'del',\n    describe: 'Delete existing content in the output folder (outputFolderPath) before writing compiled files',\n    type: 'boolean'\n  }).argv; //Enable debugger logging ASAP\n\n  (0, _logger.setLogLevel)(yargsObject['logLevel']);\n  (0, _logger.logger)().debug(`cli args: ${JSON.stringify(yargsObject)}`);\n  return yargsObject;\n};\n\nconst convertYargsToShujiOptions = yargs => {\n  const mergedObject = {};\n  Object.keys(_index.defaultOptions).forEach(key => {\n    if (yargs.hasOwnProperty(key)) {\n      mergedObject[key] = yargs[key];\n    }\n  });\n  (0, _logger.logger)().debug(`parsed user options: ${JSON.stringify(mergedObject)}`);\n  return mergedObject;\n};\n\nconst cli = async args => {\n  try {\n    const yargs = handleArgs(args);\n    const userOptions = convertYargsToShujiOptions(yargs);\n    await (0, _index.transformMarkdownFiles)(userOptions);\n  } catch (err) {\n    (0, _logger.logger)().error(`An unknown error occurred! Try using a markdown validator to ensure your mardown files are valid`, err);\n  }\n};\n\nexports.cli = cli;\ncli(process.argv);","\"use strict\";\n\nmodule.exports = JSON.parse(\"{\\\"name\\\":\\\"@ermish/shuji\\\",\\\"version\\\":\\\"1.3.2\\\",\\\"author\\\":\\\"ermish <philipermish@gmail.com>\\\",\\\"license\\\":\\\"MIT\\\",\\\"description\\\":\\\"A Markdown to React JSX converter\\\",\\\"keywords\\\":[\\\"react\\\",\\\"markdown\\\",\\\"template\\\",\\\"remark\\\",\\\"jsx\\\",\\\"front matter\\\",\\\"converter\\\"],\\\"engines\\\":{\\\"node\\\":\\\">14\\\"},\\\"repository\\\":\\\"https://github.com/Ermish/shuji\\\",\\\"bin\\\":{\\\"shuji\\\":\\\"./dist/cli.js\\\"},\\\"collaborators\\\":[\\\"ermish <philipermish@gmail.com>\\\"],\\\"files\\\":[\\\"dist/\\\",\\\"package.json\\\",\\\"license\\\",\\\"README.md\\\"],\\\"publishConfig\\\":{\\\"access\\\":\\\"public\\\"},\\\"scripts\\\":{\\\"build\\\":\\\"yarn && parcel build ./src/index.ts ./src/cli.ts --dist-dir dist\\\",\\\"start\\\":\\\"node ./dist/cli.js -h -i='./src/samples' --useReactHelmet=false\\\",\\\"lint\\\":\\\"eslint ./src/**.js\\\",\\\"test\\\":\\\"jest --verbose\\\",\\\"cli\\\":\\\"\\\"},\\\"dependencies\\\":{\\\"chalk\\\":\\\"^4.1.1\\\",\\\"fs-extra\\\":\\\"^10.0.0\\\",\\\"gray-matter\\\":\\\"^4.0.2\\\",\\\"json5\\\":\\\"^2.2.0\\\",\\\"react\\\":\\\"^17.0.2\\\",\\\"react-dom\\\":\\\"^17.0.2\\\",\\\"react-markdown\\\":\\\"^6.0.2\\\",\\\"yargs\\\":\\\"^17.0.1\\\"},\\\"devDependencies\\\":{\\\"@babel/core\\\":\\\"^7.14.0\\\",\\\"@babel/preset-env\\\":\\\"^7.12.11\\\",\\\"@babel/preset-react\\\":\\\"^7.13.13\\\",\\\"@babel/preset-typescript\\\":\\\"^7.13.0\\\",\\\"@tsconfig/node16\\\":\\\"^1.0.1\\\",\\\"@types/fs-extra\\\":\\\"^9.0.11\\\",\\\"@types/jest\\\":\\\"^26.0.20\\\",\\\"@types/json5\\\":\\\"^2.2.0\\\",\\\"@types/klaw\\\":\\\"^3.0.1\\\",\\\"@types/react\\\":\\\"^17.0.0\\\",\\\"@types/react-dom\\\":\\\"^17.0.0\\\",\\\"babel-jest\\\":\\\"^26.6.3\\\",\\\"eslint\\\":\\\"^7.27.0\\\",\\\"eslint-config-prettier\\\":\\\"^7.1.0\\\",\\\"jest\\\":\\\"^26.6.3\\\",\\\"parcel\\\":\\\"^2.0.0-beta.3.1\\\",\\\"sass\\\":\\\"^1.32.0\\\",\\\"stylelint\\\":\\\"^13.8.0\\\",\\\"stylelint-config-recommended\\\":\\\"^3.0.0\\\",\\\"stylelint-order\\\":\\\"^4.1.0\\\",\\\"stylelint-scss\\\":\\\"^3.18.0\\\",\\\"typescript\\\":\\\"^4.2.4\\\"}}\");","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertMarkdownToJSX = exports.convertMarkdownFilesToJSXFiles = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _server = require(\"react-dom/server\");\n\nvar _reactMarkdown = _interopRequireDefault(require(\"react-markdown\"));\n\nvar _grayMatter = _interopRequireDefault(require(\"gray-matter\"));\n\nvar _json = require(\"json5\");\n\nvar _logger = require(\"./logger\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Converts Markdown files to JSX files, including any html in the markdown.\r\n * Also, front-matter will be extracted in js variables in the react component.\r\n * @param {string[]} `markdownFiles` Markdown strings to convert that may also include front-matter and html.\r\n * @param {string} `outputFolderPath` Front matter to stringify.\r\n * @param {string} `reactContextName` name of react context object to assign front-matter variables to.\r\n * @return {Promise<JsxFiles>} Files containing jsx\r\n */\nconst convertMarkdownFilesToJSXFiles = async (markdownFiles, useReactHelmet, reactContextVarName, reactContextName) => {\n  const files = await Promise.all(markdownFiles.map(async file => {\n    const frontMatterAndMarkdown = extractFrontMatter(file.data, useReactHelmet, reactContextVarName, reactContextName);\n    const jsxString = convertMarkdownAndHtmlToJsx(frontMatterAndMarkdown.markdownString);\n    const reactComponentString = createJsxComponentString(file.fileName, jsxString, useReactHelmet, frontMatterAndMarkdown.frontMatterJsxString, reactContextName);\n    return {\n      fileName: file.fileName,\n      data: reactComponentString\n    };\n  }));\n  return files;\n};\n/**\r\n * Converts Markdown to JSX, including any html in the markdown.\r\n * Also, front-matter will be extracted in js variables in the react component.\r\n * @param {string} `markdownString` Markdown string to convert to a react component that may also include front-matter and html.\r\n * @param {componentName} `componentName` Name of new react component.\r\n * @param {string} `reactContextVarName` name of react context variable name to assign front-matter variables to. like [shuji, setShuji] = useContext(...)\r\n * @param {string} `reactContextName` name of react context object to assign front-matter variables to.\r\n * @return {Promise<string>} Front matter and Markdown JSX strings\r\n */\n\n\nexports.convertMarkdownFilesToJSXFiles = convertMarkdownFilesToJSXFiles;\n\nconst convertMarkdownToJSX = async (markdownString, componentName, useReactHelmet, reactContextVarName, reactContextName) => {\n  const frontMatterAndMarkdown = extractFrontMatter(markdownString, useReactHelmet, reactContextVarName, reactContextName);\n  const jsxString = convertMarkdownAndHtmlToJsx(frontMatterAndMarkdown.markdownString);\n  const reactComponentString = createJsxComponentString(componentName, jsxString, useReactHelmet, frontMatterAndMarkdown.frontMatterJsxString, reactContextName);\n  return reactComponentString;\n};\n\nexports.convertMarkdownToJSX = convertMarkdownToJSX;\n\nconst convertMarkdownAndHtmlToJsx = markdownString => {\n  try {\n    const jsxString = (0, _server.renderToStaticMarkup)( /*#__PURE__*/_react.default.createElement(_reactMarkdown.default, {\n      children: markdownString\n    }));\n    const jsxStringWithTabs = jsxString.replace(/(\\n|\\r)/g, c => c + '\\t\\t\\t');\n    return jsxStringWithTabs;\n  } catch (error) {\n    (0, _logger.logger)().error(`error converting markdown to jsx: ${error}`);\n    throw new error();\n  }\n};\n\nconst extractFrontMatter = (stringWithFrontMatter, useReactHelment, reactContextVarName, reactContextName) => {\n  try {\n    const {\n      data,\n      content\n    } = (0, _grayMatter.default)(stringWithFrontMatter);\n    const frontMatterJsxString = createFrontMatterJSXString(data, useReactHelment, reactContextVarName, reactContextName);\n    return {\n      frontMatterJsxString: frontMatterJsxString,\n      markdownString: content\n    };\n  } catch (error) {\n    (0, _logger.logger)().error(`failed to extract front matter: ${error}`);\n    throw new error();\n  }\n};\n\nconst createFrontMatterJSXString = (propsToAssign, useReactHelment, reactContextVarName, reactContextName) => {\n  if (Object.keys(propsToAssign).length < 1) return '';\n\n  if (useReactHelment == false) {\n    return createReactHeadString(propsToAssign, reactContextVarName, reactContextName);\n  }\n\n  return createReactHelmentElements(propsToAssign);\n};\n\nconst createJsxComponentString = (componentName, reactString, useReactHelmet, frontmatterString, reactContextName) => {\n  const capitalizedMethodName = componentName.replace(/^\\w/, c => c.toUpperCase());\n  const camelCasedComponentName = componentName.replace(/^\\w/, c => c.toLowerCase());\n  let reactComponent = `${frontmatterString ? useReactHelmet ? `import { Helmet } from 'react-helmet'\\n\\n` : `import { ${reactContextName} } from 'reactHead'\\n\\n` : ''}` + `export const ${capitalizedMethodName} = () => { \\n  ${useReactHelmet ? '' : frontmatterString}\n    return (\n        <div className='${camelCasedComponentName}'>\n        ${useReactHelmet ? frontmatterString : ''}\\t${reactString}\n        </div>\n    )\\n}`;\n  return reactComponent;\n};\n\nconst createReactHelmentElements = propsToAssign => {\n  if (!propsToAssign) {\n    return '';\n  }\n\n  let propAssignmentString = '';\n\n  for (const propName in propsToAssign) {\n    const propValue = propsToAssign[propName]; //clean up arrays\n\n    let propValueStringified = (0, _json.stringify)(propValue).replace(/]|[|'[]/g, '');\n\n    switch (propName) {\n      case 'title':\n        propAssignmentString += `\\n\\t\\t\\t\\t<title>${propValueStringified}</title>`;\n        break;\n\n      case 'description':\n        propAssignmentString += `\\n\\t\\t\\t\\t<meta name=\"description\" content=\"${propValueStringified}\" />`;\n        break;\n\n      case 'author':\n        propAssignmentString += `\\n\\t\\t\\t\\t<meta name=\"author\" content=\"${propValueStringified}\" />`;\n        break;\n\n      case 'keywords':\n        propAssignmentString += `\\n\\t\\t\\t\\t<meta name=\"keywords\" content=\"${propValueStringified}\" />`;\n        break;\n\n      default:\n        propAssignmentString += `\\n\\t\\t\\t\\t<meta name=\"${propName}\" content=\"${propValueStringified}\" />`;\n        break;\n    }\n  }\n\n  const reactHelmetString = `\\t<Helmet>` + `\\t\\t${propAssignmentString}` + `\\n\\t\\t\\t</Helmet>`;\n  return reactHelmetString;\n};\n\nconst createReactHeadString = (propsToAssign, reactContextVarName, reactContextName) => {\n  if (!propsToAssign) {\n    return '';\n  } //Example\n  // const [metadata, setMetadata] = useContext('TestContext')\n  // setMetadata({\n  //     ...metadata,\n  //     date = '2021-01-01',\n  //     title = 'node is cool',\n  //     slug = 'node-is-cool',\n  //     description = 'How to node',\n  //     tags = ['node','cool','shuji']\n  // })\n\n\n  const setContextVarName = 'set' + reactContextVarName.replace(/^\\w/, c => c.toUpperCase());\n  const camelCasedVarName = reactContextVarName.replace(/^\\w/, c => c.toLowerCase());\n  let propAssignmentString = '';\n\n  for (const propName in propsToAssign) {\n    const propValue = propsToAssign[propName];\n    let propValueStringified = (0, _json.stringify)(propValue);\n    propAssignmentString += `\\t\\t${propName} = ${propValueStringified}, \\n`;\n  }\n\n  const contextAssignmentString = `\\n\\tconst [${camelCasedVarName}, ${setContextVarName}] = useContext('${reactContextName}')` + `\\n\\n\\t${setContextVarName}({` + `\\n\\t\\t...${camelCasedVarName},` + `\\n${propAssignmentString}` + `\\n\\t})\\n`;\n  return contextAssignmentString;\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logger = logger;\nexports.setLogLevel = setLogLevel;\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//TODO make this a real logger\nfunction logger() {\n  const shujiPurple = _chalk.default.hex('#6C63A2');\n\n  const debug = message => {\n    if (logLevel > 1) return;\n\n    const blue = _chalk.default.hex('#58a6ff');\n\n    console.log(shujiPurple('Shuji: ') + blue(message));\n  };\n\n  const info = message => {\n    if (logLevel > 2) return;\n\n    const blue = _chalk.default.hex('#58a6ff');\n\n    console.log(shujiPurple('Shuji: ') + blue(message));\n  };\n\n  const warn = message => {\n    if (logLevel > 2) return;\n\n    const orange = _chalk.default.hex('#FFA500');\n\n    console.log(shujiPurple('Shuji: ') + orange(message));\n  };\n\n  const error = (message, error) => {\n    if (logLevel > 2) return;\n\n    const red = _chalk.default.hex('#ff7b72');\n\n    const fullErrorMessage = error ? message + `\\n actual error: ${error.message} \\n ${error.stack}` : message;\n    console.log(shujiPurple('Shuji: ') + red(fullErrorMessage));\n  };\n\n  return {\n    debug,\n    info,\n    warn,\n    error\n  };\n} // level 1 = debug\n// level 2 = default\n// level 3 = no logging\n\n\nlet logLevel = 2;\n\nfunction setLogLevel(level) {\n  logLevel = level;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.writeJsxFiles = exports.getMdFilesFromFolder = void 0;\n\nvar _fs = require(\"fs\");\n\nvar _path = require(\"path\");\n\nvar _logger = require(\"./logger\");\n\nconst getMdFilesFromFolder = async path => {\n  let mdFiles = [];\n\n  try {\n    const pathStat = await _fs.promises.lstat(path);\n    const isPathADirectory = pathStat.isDirectory();\n    const fileNamesInDir = isPathADirectory ? await _fs.promises.readdir(path) : [(0, _path.basename)(path)];\n\n    if (fileNamesInDir.length < 1) {\n      (0, _logger.logger)().warn(`No .md files found in '${path}'`);\n      return mdFiles;\n    }\n\n    (0, _logger.logger)().info(`Processing ${fileNamesInDir.length} file${fileNamesInDir.length > 1 ? 's' : ''} from \"${path}\"...`);\n    mdFiles = await fileNamesInDir.reduce(async (validFilesPromise, fileName) => {\n      const validFiles = await validFilesPromise;\n      if ((0, _path.extname)(fileName) != '.md') return validFiles;\n      const filePath = isPathADirectory ? `${path}/${fileName}` : path;\n      const fileData = await _fs.promises.readFile(filePath);\n      validFiles.push({\n        fileName: (0, _path.basename)(fileName, '.md'),\n        data: fileData.toString()\n      });\n      return validFiles;\n    }, Promise.resolve([]));\n  } catch (err) {\n    (0, _logger.logger)().warn(`No .md files found in inputPath: '${path}'`);\n  }\n\n  return mdFiles;\n};\n\nexports.getMdFilesFromFolder = getMdFilesFromFolder;\n\nconst writeJsxFiles = async (folderPath, jsxFiles, deleteExistingOutputFolder) => {\n  try {\n    if (jsxFiles.length <= 0) return;\n    if (deleteExistingOutputFolder) await _fs.promises.rmdir(folderPath);\n    (0, _logger.logger)().info(`Generating ${jsxFiles.length} file${jsxFiles.length > 1 ? 's' : ''} in \"${folderPath}\"...`);\n    await _fs.promises.mkdir(folderPath, {\n      recursive: true\n    });\n    await Promise.all(jsxFiles.map(async jsxFile => {\n      await _fs.promises.writeFile(`${folderPath}/${jsxFile.fileName}.jsx`, jsxFile.data, 'utf8');\n    }));\n  } catch (error) {\n    (0, _logger.logger)().error(`error writing markdown files: ${error}`);\n  }\n};\n\nexports.writeJsxFiles = writeJsxFiles;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformMarkdownFiles = exports.transformMarkdownString = exports.defaultOptions = void 0;\n\nvar _converter = require(\"./converter\");\n\nvar _fileProcessor = require(\"./fileProcessor\");\n\nvar _logger = require(\"./logger\");\n\nconst {\n  performance,\n  PerformanceObserver,\n  PerformanceEntry\n} = require(\"perf_hooks\");\n\nconst defaultOptions = {\n  inputPath: 'markdown',\n  outputPath: 'jsxMarkdown',\n  useReactHelmet: true,\n  reactHeadContextName: 'ReactHeadContext',\n  reactHeadContextVarName: 'reactHead',\n  deleteExistingOutputFolder: false\n}; //TODO: use typescript types\n\nexports.defaultOptions = defaultOptions;\nconst perfObserver = new PerformanceObserver(items => {\n  items.getEntries().forEach(entry => {\n    const trimmedDuration = parseInt(entry.duration);\n\n    if (entry.name == 'shuji') {\n      (0, _logger.logger)().info(`Done in ${trimmedDuration}ms.`);\n      return;\n    }\n\n    (0, _logger.logger)().debug(`${entry.name} finished in ${trimmedDuration}ms.`);\n  });\n});\nperfObserver.observe({\n  entryTypes: [\"measure\"],\n  buffer: true\n});\n/**\r\n * Transforms a Markdown string to JSX, including any html in the markdown.\r\n * Also, front-matter will be extracted in js variables in the react component.\r\n * @param {string} `markdownString` Markdown string to convert to a react component that may also include front-matter and html.\r\n * @param {componentName} `componentName` Name of new react component.\r\n * @param {Options} User defined options to override default values.\r\n * @return {Promise<number>} files\r\n */\n\nconst transformMarkdownString = async (markdownString, componentName, options) => {\n  try {\n    performance.mark('start-shuji');\n    const userOptions = { ...defaultOptions,\n      ...options\n    };\n    const jsxString = await (0, _converter.convertMarkdownToJSX)(markdownString, componentName, userOptions.useReactHelmet, userOptions.reactHeadContextVarName, userOptions.reactHeadContextName);\n    return jsxString;\n  } catch (error) {\n    return '';\n  } finally {\n    performance.mark('end-shuji');\n    performance.measure('shuji', 'start-shuji', 'end-shuji');\n  }\n};\n/**\r\n * Transforms Markdown files to JSX files, including any html in the markdown.\r\n * Also, front-matter will be extracted in js variables in the react component.\r\n * @param {Options} User defined options to override default values.\r\n * @return {Promise<number>} files\r\n */\n\n\nexports.transformMarkdownString = transformMarkdownString;\n\nconst transformMarkdownFiles = async options => {\n  try {\n    performance.mark('start-shuji');\n    const userOptions = { ...defaultOptions,\n      ...options\n    };\n    const mdFiles = await (0, _fileProcessor.getMdFilesFromFolder)(userOptions.inputPath);\n    const jsxStrings = await (0, _converter.convertMarkdownFilesToJSXFiles)(mdFiles, userOptions.useReactHelmet, userOptions.reactHeadContextVarName, userOptions.reactHeadContextName);\n    await (0, _fileProcessor.writeJsxFiles)(userOptions.outputPath, jsxStrings, userOptions.deleteExistingOutputFolder);\n    return 0;\n  } catch (error) {\n    return 1;\n  } finally {\n    performance.mark('end-shuji');\n    performance.measure('shuji', 'start-shuji', 'end-shuji');\n  }\n};\n\nexports.transformMarkdownFiles = transformMarkdownFiles;"],"names":["$a89bc4bb763753d494164da31d05cc60$var$_yargs","$2ifIm$yargs","module","JSON","parse","$ef41a945f0ad9b72d9d658553d0d8690$var$_react","$ef41a945f0ad9b72d9d658553d0d8690$var$_interopRequireDefault","$2ifIm$react","$ef41a945f0ad9b72d9d658553d0d8690$var$_reactMarkdown","$2ifIm$reactmarkdown","$ef41a945f0ad9b72d9d658553d0d8690$var$_grayMatter","$2ifIm$graymatter","shujiPurple","chalk","hex","message","logLevel","blue","console","log","orange","error","red","fullErrorMessage","stack","level","$c08bde6a2c7ebbc4ffc54f57ff3d4fab$var$_chalk","$c08bde6a2c7ebbc4ffc54f57ff3d4fab$var$_interopRequireDefault","$2ifIm$chalk","convertMarkdownFilesToJSXFiles","reactComponentString","files","$ef41a945f0ad9b72d9d658553d0d8690$var$convertMarkdownAndHtmlToJsx","frontMatterAndMarkdown","markdownString","convertMarkdownToJSX","async","componentName","useReactHelmet","reactContextVarName","reactContextName","$ef41a945f0ad9b72d9d658553d0d8690$var$extractFrontMatter","frontMatterJsxString","createReactHeadString","propsToAssign","capitalizedMethodName","createJsxComponentString","frontmatterString","camelCasedComponentName","reactComponent","logger","useReactHelment","propName","reactString","propAssignmentString","replace","propValueStringified","c","toLowerCase","propValue","reactHelmetString","path","mdFiles","isPathADirectory","promises","lstat","isDirectory","fileNamesInDir","readdir","$2ifIm$basename","length","$c08bde6a2c7ebbc4ffc54f57ff3d4fab$exports","warn","info","reduce","validFilesPromise","fileName","validFiles","$2ifIm$extname","filePath","fileData","readFile","push","data","toString","Promise","resolve","err","folderPath","jsxFiles","deleteExistingOutputFolder","rmdir","mkdir","recursive","all","map","jsxFile","writeFile","$2ifIm$PerformanceObserver","$2ifIm$performance","defaultOptions","inputPath","outputPath","reactHeadContextName","reactHeadContextVarName","$7d09df7f6586727d9bda14a00ae6ddb6$require$PerformanceObserver","items","getEntries","forEach","entry","trimmedDuration","parseInt","duration","name","debug","observe","entryTypes","buffer","transformMarkdownString","mark","transformMarkdownFiles","measure","options","cli","args","userOptions","yargs","mergedObject","Object","keys","key","hasOwnProperty","stringify","convertYargsToShujiOptions","cliArgs","yargsObject","default","scriptName","wrap","terminalWidth","help","alias","showHelpOnFail","epilogue","version","config","configPath","$2ifIm$readFileSync","example","option","choices","describe","type","group","argv","setLogLevel","handleArgs","$7d09df7f6586727d9bda14a00ae6ddb6$exports","process"],"version":3,"file":"cli.js.map","sourceRoot":"../"}